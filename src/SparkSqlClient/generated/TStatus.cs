/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class TStatus : TBase
{
  private List<string> _infoMessages;
  private string _sqlState;
  private int _errorCode;
  private string _errorMessage;

  /// <summary>
  /// 
  /// <seealso cref="global::.TStatusCode"/>
  /// </summary>
  public TStatusCode StatusCode { get; set; }

  public List<string> InfoMessages
  {
    get
    {
      return _infoMessages;
    }
    set
    {
      __isset.infoMessages = true;
      this._infoMessages = value;
    }
  }

  public string SqlState
  {
    get
    {
      return _sqlState;
    }
    set
    {
      __isset.sqlState = true;
      this._sqlState = value;
    }
  }

  public int ErrorCode
  {
    get
    {
      return _errorCode;
    }
    set
    {
      __isset.errorCode = true;
      this._errorCode = value;
    }
  }

  public string ErrorMessage
  {
    get
    {
      return _errorMessage;
    }
    set
    {
      __isset.errorMessage = true;
      this._errorMessage = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool infoMessages;
    public bool sqlState;
    public bool errorCode;
    public bool errorMessage;
  }

  public TStatus()
  {
  }

  public TStatus(TStatusCode statusCode) : this()
  {
    this.StatusCode = statusCode;
  }

  public TStatus DeepCopy()
  {
    var tmp222 = new TStatus();
    tmp222.StatusCode = this.StatusCode;
    if((InfoMessages != null) && __isset.infoMessages)
    {
      tmp222.InfoMessages = this.InfoMessages.DeepCopy();
    }
    tmp222.__isset.infoMessages = this.__isset.infoMessages;
    if((SqlState != null) && __isset.sqlState)
    {
      tmp222.SqlState = this.SqlState;
    }
    tmp222.__isset.sqlState = this.__isset.sqlState;
    if(__isset.errorCode)
    {
      tmp222.ErrorCode = this.ErrorCode;
    }
    tmp222.__isset.errorCode = this.__isset.errorCode;
    if((ErrorMessage != null) && __isset.errorMessage)
    {
      tmp222.ErrorMessage = this.ErrorMessage;
    }
    tmp222.__isset.errorMessage = this.__isset.errorMessage;
    return tmp222;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_statusCode = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32)
            {
              StatusCode = (TStatusCode)await iprot.ReadI32Async(cancellationToken);
              isset_statusCode = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.List)
            {
              {
                var _list223 = await iprot.ReadListBeginAsync(cancellationToken);
                InfoMessages = new List<string>(_list223.Count);
                for(int _i224 = 0; _i224 < _list223.Count; ++_i224)
                {
                  string _elem225;
                  _elem225 = await iprot.ReadStringAsync(cancellationToken);
                  InfoMessages.Add(_elem225);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              SqlState = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.I32)
            {
              ErrorCode = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.String)
            {
              ErrorMessage = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_statusCode)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp226 = new TStruct("TStatus");
      await oprot.WriteStructBeginAsync(tmp226, cancellationToken);
      var tmp227 = new TField();
      tmp227.Name = "statusCode";
      tmp227.Type = TType.I32;
      tmp227.ID = 1;
      await oprot.WriteFieldBeginAsync(tmp227, cancellationToken);
      await oprot.WriteI32Async((int)StatusCode, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      if((InfoMessages != null) && __isset.infoMessages)
      {
        tmp227.Name = "infoMessages";
        tmp227.Type = TType.List;
        tmp227.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp227, cancellationToken);
        await oprot.WriteListBeginAsync(new TList(TType.String, InfoMessages.Count), cancellationToken);
        foreach (string _iter228 in InfoMessages)
        {
          await oprot.WriteStringAsync(_iter228, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((SqlState != null) && __isset.sqlState)
      {
        tmp227.Name = "sqlState";
        tmp227.Type = TType.String;
        tmp227.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp227, cancellationToken);
        await oprot.WriteStringAsync(SqlState, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.errorCode)
      {
        tmp227.Name = "errorCode";
        tmp227.Type = TType.I32;
        tmp227.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp227, cancellationToken);
        await oprot.WriteI32Async(ErrorCode, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ErrorMessage != null) && __isset.errorMessage)
      {
        tmp227.Name = "errorMessage";
        tmp227.Type = TType.String;
        tmp227.ID = 5;
        await oprot.WriteFieldBeginAsync(tmp227, cancellationToken);
        await oprot.WriteStringAsync(ErrorMessage, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TStatus other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return global::System.Object.Equals(StatusCode, other.StatusCode)
      && ((__isset.infoMessages == other.__isset.infoMessages) && ((!__isset.infoMessages) || (TCollections.Equals(InfoMessages, other.InfoMessages))))
      && ((__isset.sqlState == other.__isset.sqlState) && ((!__isset.sqlState) || (global::System.Object.Equals(SqlState, other.SqlState))))
      && ((__isset.errorCode == other.__isset.errorCode) && ((!__isset.errorCode) || (global::System.Object.Equals(ErrorCode, other.ErrorCode))))
      && ((__isset.errorMessage == other.__isset.errorMessage) && ((!__isset.errorMessage) || (global::System.Object.Equals(ErrorMessage, other.ErrorMessage))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      hashcode = (hashcode * 397) + StatusCode.GetHashCode();
      if((InfoMessages != null) && __isset.infoMessages)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(InfoMessages);
      }
      if((SqlState != null) && __isset.sqlState)
      {
        hashcode = (hashcode * 397) + SqlState.GetHashCode();
      }
      if(__isset.errorCode)
      {
        hashcode = (hashcode * 397) + ErrorCode.GetHashCode();
      }
      if((ErrorMessage != null) && __isset.errorMessage)
      {
        hashcode = (hashcode * 397) + ErrorMessage.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("TStatus(");
    sb.Append(", StatusCode: ");
    sb.Append(StatusCode);
    if((InfoMessages != null) && __isset.infoMessages)
    {
      sb.Append(", InfoMessages: ");
      sb.Append(InfoMessages);
    }
    if((SqlState != null) && __isset.sqlState)
    {
      sb.Append(", SqlState: ");
      sb.Append(SqlState);
    }
    if(__isset.errorCode)
    {
      sb.Append(", ErrorCode: ");
      sb.Append(ErrorCode);
    }
    if((ErrorMessage != null) && __isset.errorMessage)
    {
      sb.Append(", ErrorMessage: ");
      sb.Append(ErrorMessage);
    }
    sb.Append(')');
    return sb.ToString();
  }
}

