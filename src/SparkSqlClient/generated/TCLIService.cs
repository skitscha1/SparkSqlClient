/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using SparkSqlClient.generated;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

public partial class TCLIService
{
  public interface IAsync
  {
    global::System.Threading.Tasks.Task<TOpenSessionResp> OpenSession(TOpenSessionReq @req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TCloseSessionResp> CloseSession(TCloseSessionReq @req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TGetInfoResp> GetInfo(TGetInfoReq @req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TExecuteStatementResp> ExecuteStatement(TExecuteStatementReq @req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TGetTypeInfoResp> GetTypeInfo(TGetTypeInfoReq @req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TGetCatalogsResp> GetCatalogs(TGetCatalogsReq @req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TGetSchemasResp> GetSchemas(TGetSchemasReq @req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TGetTablesResp> GetTables(TGetTablesReq @req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TGetTableTypesResp> GetTableTypes(TGetTableTypesReq @req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TGetColumnsResp> GetColumns(TGetColumnsReq @req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TGetFunctionsResp> GetFunctions(TGetFunctionsReq @req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TGetPrimaryKeysResp> GetPrimaryKeys(TGetPrimaryKeysReq @req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TGetCrossReferenceResp> GetCrossReference(TGetCrossReferenceReq @req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TGetOperationStatusResp> GetOperationStatus(TGetOperationStatusReq @req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TCancelOperationResp> CancelOperation(TCancelOperationReq @req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TCloseOperationResp> CloseOperation(TCloseOperationReq @req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TGetResultSetMetadataResp> GetResultSetMetadata(TGetResultSetMetadataReq @req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TFetchResultsResp> FetchResults(TFetchResultsReq @req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TGetDelegationTokenResp> GetDelegationToken(TGetDelegationTokenReq @req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TCancelDelegationTokenResp> CancelDelegationToken(TCancelDelegationTokenReq @req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TRenewDelegationTokenResp> RenewDelegationToken(TRenewDelegationTokenReq @req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TGetQueryIdResp> GetQueryId(TGetQueryIdReq @req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TSetClientInfoResp> SetClientInfo(TSetClientInfoReq @req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TUploadDataResp> UploadData(TUploadDataReq @req, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<TDownloadDataResp> DownloadData(TDownloadDataReq @req, CancellationToken cancellationToken = default);

  }


  public class Client : TBaseClient, IDisposable, IAsync
  {
    public Client(TProtocol protocol) : this(protocol, protocol)
    {
    }

    public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
    {
    }

    public async global::System.Threading.Tasks.Task<TOpenSessionResp> OpenSession(TOpenSessionReq @req, CancellationToken cancellationToken = default)
    {
      await send_OpenSession(@req, cancellationToken);
      return await recv_OpenSession(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_OpenSession(TOpenSessionReq @req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("OpenSession", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp547 = new InternalStructs.OpenSession_args() {
        Req = @req,
      };
      
      await tmp547.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TOpenSessionResp> recv_OpenSession(CancellationToken cancellationToken = default)
    {
      
      var tmp548 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp548.Type == TMessageType.Exception)
      {
        var tmp549 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp549;
      }

      var tmp550 = new InternalStructs.OpenSession_result();
      await tmp550.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp550.__isset.success)
      {
        return tmp550.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "OpenSession failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TCloseSessionResp> CloseSession(TCloseSessionReq @req, CancellationToken cancellationToken = default)
    {
      await send_CloseSession(@req, cancellationToken);
      return await recv_CloseSession(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_CloseSession(TCloseSessionReq @req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("CloseSession", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp551 = new InternalStructs.CloseSession_args() {
        Req = @req,
      };
      
      await tmp551.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TCloseSessionResp> recv_CloseSession(CancellationToken cancellationToken = default)
    {
      
      var tmp552 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp552.Type == TMessageType.Exception)
      {
        var tmp553 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp553;
      }

      var tmp554 = new InternalStructs.CloseSession_result();
      await tmp554.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp554.__isset.success)
      {
        return tmp554.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CloseSession failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TGetInfoResp> GetInfo(TGetInfoReq @req, CancellationToken cancellationToken = default)
    {
      await send_GetInfo(@req, cancellationToken);
      return await recv_GetInfo(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_GetInfo(TGetInfoReq @req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetInfo", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp555 = new InternalStructs.GetInfo_args() {
        Req = @req,
      };
      
      await tmp555.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TGetInfoResp> recv_GetInfo(CancellationToken cancellationToken = default)
    {
      
      var tmp556 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp556.Type == TMessageType.Exception)
      {
        var tmp557 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp557;
      }

      var tmp558 = new InternalStructs.GetInfo_result();
      await tmp558.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp558.__isset.success)
      {
        return tmp558.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetInfo failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TExecuteStatementResp> ExecuteStatement(TExecuteStatementReq @req, CancellationToken cancellationToken = default)
    {
      await send_ExecuteStatement(@req, cancellationToken);
      return await recv_ExecuteStatement(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_ExecuteStatement(TExecuteStatementReq @req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("ExecuteStatement", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp559 = new InternalStructs.ExecuteStatement_args() {
        Req = @req,
      };
      
      await tmp559.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TExecuteStatementResp> recv_ExecuteStatement(CancellationToken cancellationToken = default)
    {
      
      var tmp560 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp560.Type == TMessageType.Exception)
      {
        var tmp561 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp561;
      }

      var tmp562 = new InternalStructs.ExecuteStatement_result();
      await tmp562.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp562.__isset.success)
      {
        return tmp562.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ExecuteStatement failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TGetTypeInfoResp> GetTypeInfo(TGetTypeInfoReq @req, CancellationToken cancellationToken = default)
    {
      await send_GetTypeInfo(@req, cancellationToken);
      return await recv_GetTypeInfo(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_GetTypeInfo(TGetTypeInfoReq @req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetTypeInfo", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp563 = new InternalStructs.GetTypeInfo_args() {
        Req = @req,
      };
      
      await tmp563.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TGetTypeInfoResp> recv_GetTypeInfo(CancellationToken cancellationToken = default)
    {
      
      var tmp564 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp564.Type == TMessageType.Exception)
      {
        var tmp565 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp565;
      }

      var tmp566 = new InternalStructs.GetTypeInfo_result();
      await tmp566.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp566.__isset.success)
      {
        return tmp566.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetTypeInfo failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TGetCatalogsResp> GetCatalogs(TGetCatalogsReq @req, CancellationToken cancellationToken = default)
    {
      await send_GetCatalogs(@req, cancellationToken);
      return await recv_GetCatalogs(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_GetCatalogs(TGetCatalogsReq @req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetCatalogs", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp567 = new InternalStructs.GetCatalogs_args() {
        Req = @req,
      };
      
      await tmp567.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TGetCatalogsResp> recv_GetCatalogs(CancellationToken cancellationToken = default)
    {
      
      var tmp568 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp568.Type == TMessageType.Exception)
      {
        var tmp569 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp569;
      }

      var tmp570 = new InternalStructs.GetCatalogs_result();
      await tmp570.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp570.__isset.success)
      {
        return tmp570.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetCatalogs failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TGetSchemasResp> GetSchemas(TGetSchemasReq @req, CancellationToken cancellationToken = default)
    {
      await send_GetSchemas(@req, cancellationToken);
      return await recv_GetSchemas(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_GetSchemas(TGetSchemasReq @req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetSchemas", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp571 = new InternalStructs.GetSchemas_args() {
        Req = @req,
      };
      
      await tmp571.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TGetSchemasResp> recv_GetSchemas(CancellationToken cancellationToken = default)
    {
      
      var tmp572 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp572.Type == TMessageType.Exception)
      {
        var tmp573 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp573;
      }

      var tmp574 = new InternalStructs.GetSchemas_result();
      await tmp574.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp574.__isset.success)
      {
        return tmp574.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSchemas failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TGetTablesResp> GetTables(TGetTablesReq @req, CancellationToken cancellationToken = default)
    {
      await send_GetTables(@req, cancellationToken);
      return await recv_GetTables(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_GetTables(TGetTablesReq @req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetTables", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp575 = new InternalStructs.GetTables_args() {
        Req = @req,
      };
      
      await tmp575.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TGetTablesResp> recv_GetTables(CancellationToken cancellationToken = default)
    {
      
      var tmp576 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp576.Type == TMessageType.Exception)
      {
        var tmp577 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp577;
      }

      var tmp578 = new InternalStructs.GetTables_result();
      await tmp578.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp578.__isset.success)
      {
        return tmp578.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetTables failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TGetTableTypesResp> GetTableTypes(TGetTableTypesReq @req, CancellationToken cancellationToken = default)
    {
      await send_GetTableTypes(@req, cancellationToken);
      return await recv_GetTableTypes(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_GetTableTypes(TGetTableTypesReq @req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetTableTypes", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp579 = new InternalStructs.GetTableTypes_args() {
        Req = @req,
      };
      
      await tmp579.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TGetTableTypesResp> recv_GetTableTypes(CancellationToken cancellationToken = default)
    {
      
      var tmp580 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp580.Type == TMessageType.Exception)
      {
        var tmp581 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp581;
      }

      var tmp582 = new InternalStructs.GetTableTypes_result();
      await tmp582.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp582.__isset.success)
      {
        return tmp582.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetTableTypes failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TGetColumnsResp> GetColumns(TGetColumnsReq @req, CancellationToken cancellationToken = default)
    {
      await send_GetColumns(@req, cancellationToken);
      return await recv_GetColumns(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_GetColumns(TGetColumnsReq @req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetColumns", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp583 = new InternalStructs.GetColumns_args() {
        Req = @req,
      };
      
      await tmp583.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TGetColumnsResp> recv_GetColumns(CancellationToken cancellationToken = default)
    {
      
      var tmp584 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp584.Type == TMessageType.Exception)
      {
        var tmp585 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp585;
      }

      var tmp586 = new InternalStructs.GetColumns_result();
      await tmp586.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp586.__isset.success)
      {
        return tmp586.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetColumns failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TGetFunctionsResp> GetFunctions(TGetFunctionsReq @req, CancellationToken cancellationToken = default)
    {
      await send_GetFunctions(@req, cancellationToken);
      return await recv_GetFunctions(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_GetFunctions(TGetFunctionsReq @req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetFunctions", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp587 = new InternalStructs.GetFunctions_args() {
        Req = @req,
      };
      
      await tmp587.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TGetFunctionsResp> recv_GetFunctions(CancellationToken cancellationToken = default)
    {
      
      var tmp588 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp588.Type == TMessageType.Exception)
      {
        var tmp589 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp589;
      }

      var tmp590 = new InternalStructs.GetFunctions_result();
      await tmp590.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp590.__isset.success)
      {
        return tmp590.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetFunctions failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TGetPrimaryKeysResp> GetPrimaryKeys(TGetPrimaryKeysReq @req, CancellationToken cancellationToken = default)
    {
      await send_GetPrimaryKeys(@req, cancellationToken);
      return await recv_GetPrimaryKeys(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_GetPrimaryKeys(TGetPrimaryKeysReq @req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetPrimaryKeys", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp591 = new InternalStructs.GetPrimaryKeys_args() {
        Req = @req,
      };
      
      await tmp591.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TGetPrimaryKeysResp> recv_GetPrimaryKeys(CancellationToken cancellationToken = default)
    {
      
      var tmp592 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp592.Type == TMessageType.Exception)
      {
        var tmp593 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp593;
      }

      var tmp594 = new InternalStructs.GetPrimaryKeys_result();
      await tmp594.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp594.__isset.success)
      {
        return tmp594.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetPrimaryKeys failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TGetCrossReferenceResp> GetCrossReference(TGetCrossReferenceReq @req, CancellationToken cancellationToken = default)
    {
      await send_GetCrossReference(@req, cancellationToken);
      return await recv_GetCrossReference(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_GetCrossReference(TGetCrossReferenceReq @req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetCrossReference", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp595 = new InternalStructs.GetCrossReference_args() {
        Req = @req,
      };
      
      await tmp595.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TGetCrossReferenceResp> recv_GetCrossReference(CancellationToken cancellationToken = default)
    {
      
      var tmp596 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp596.Type == TMessageType.Exception)
      {
        var tmp597 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp597;
      }

      var tmp598 = new InternalStructs.GetCrossReference_result();
      await tmp598.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp598.__isset.success)
      {
        return tmp598.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetCrossReference failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TGetOperationStatusResp> GetOperationStatus(TGetOperationStatusReq @req, CancellationToken cancellationToken = default)
    {
      await send_GetOperationStatus(@req, cancellationToken);
      return await recv_GetOperationStatus(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_GetOperationStatus(TGetOperationStatusReq @req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetOperationStatus", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp599 = new InternalStructs.GetOperationStatus_args() {
        Req = @req,
      };
      
      await tmp599.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TGetOperationStatusResp> recv_GetOperationStatus(CancellationToken cancellationToken = default)
    {
      
      var tmp600 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp600.Type == TMessageType.Exception)
      {
        var tmp601 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp601;
      }

      var tmp602 = new InternalStructs.GetOperationStatus_result();
      await tmp602.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp602.__isset.success)
      {
        return tmp602.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetOperationStatus failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TCancelOperationResp> CancelOperation(TCancelOperationReq @req, CancellationToken cancellationToken = default)
    {
      await send_CancelOperation(@req, cancellationToken);
      return await recv_CancelOperation(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_CancelOperation(TCancelOperationReq @req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("CancelOperation", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp603 = new InternalStructs.CancelOperation_args() {
        Req = @req,
      };
      
      await tmp603.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TCancelOperationResp> recv_CancelOperation(CancellationToken cancellationToken = default)
    {
      
      var tmp604 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp604.Type == TMessageType.Exception)
      {
        var tmp605 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp605;
      }

      var tmp606 = new InternalStructs.CancelOperation_result();
      await tmp606.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp606.__isset.success)
      {
        return tmp606.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CancelOperation failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TCloseOperationResp> CloseOperation(TCloseOperationReq @req, CancellationToken cancellationToken = default)
    {
      await send_CloseOperation(@req, cancellationToken);
      return await recv_CloseOperation(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_CloseOperation(TCloseOperationReq @req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("CloseOperation", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp607 = new InternalStructs.CloseOperation_args() {
        Req = @req,
      };
      
      await tmp607.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TCloseOperationResp> recv_CloseOperation(CancellationToken cancellationToken = default)
    {
      
      var tmp608 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp608.Type == TMessageType.Exception)
      {
        var tmp609 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp609;
      }

      var tmp610 = new InternalStructs.CloseOperation_result();
      await tmp610.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp610.__isset.success)
      {
        return tmp610.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CloseOperation failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TGetResultSetMetadataResp> GetResultSetMetadata(TGetResultSetMetadataReq @req, CancellationToken cancellationToken = default)
    {
      await send_GetResultSetMetadata(@req, cancellationToken);
      return await recv_GetResultSetMetadata(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_GetResultSetMetadata(TGetResultSetMetadataReq @req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetResultSetMetadata", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp611 = new InternalStructs.GetResultSetMetadata_args() {
        Req = @req,
      };
      
      await tmp611.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TGetResultSetMetadataResp> recv_GetResultSetMetadata(CancellationToken cancellationToken = default)
    {
      
      var tmp612 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp612.Type == TMessageType.Exception)
      {
        var tmp613 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp613;
      }

      var tmp614 = new InternalStructs.GetResultSetMetadata_result();
      await tmp614.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp614.__isset.success)
      {
        return tmp614.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetResultSetMetadata failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TFetchResultsResp> FetchResults(TFetchResultsReq @req, CancellationToken cancellationToken = default)
    {
      await send_FetchResults(@req, cancellationToken);
      return await recv_FetchResults(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_FetchResults(TFetchResultsReq @req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("FetchResults", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp615 = new InternalStructs.FetchResults_args() {
        Req = @req,
      };
      
      await tmp615.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TFetchResultsResp> recv_FetchResults(CancellationToken cancellationToken = default)
    {
      
      var tmp616 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp616.Type == TMessageType.Exception)
      {
        var tmp617 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp617;
      }

      var tmp618 = new InternalStructs.FetchResults_result();
      await tmp618.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp618.__isset.success)
      {
        return tmp618.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "FetchResults failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TGetDelegationTokenResp> GetDelegationToken(TGetDelegationTokenReq @req, CancellationToken cancellationToken = default)
    {
      await send_GetDelegationToken(@req, cancellationToken);
      return await recv_GetDelegationToken(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_GetDelegationToken(TGetDelegationTokenReq @req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetDelegationToken", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp619 = new InternalStructs.GetDelegationToken_args() {
        Req = @req,
      };
      
      await tmp619.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TGetDelegationTokenResp> recv_GetDelegationToken(CancellationToken cancellationToken = default)
    {
      
      var tmp620 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp620.Type == TMessageType.Exception)
      {
        var tmp621 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp621;
      }

      var tmp622 = new InternalStructs.GetDelegationToken_result();
      await tmp622.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp622.__isset.success)
      {
        return tmp622.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetDelegationToken failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TCancelDelegationTokenResp> CancelDelegationToken(TCancelDelegationTokenReq @req, CancellationToken cancellationToken = default)
    {
      await send_CancelDelegationToken(@req, cancellationToken);
      return await recv_CancelDelegationToken(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_CancelDelegationToken(TCancelDelegationTokenReq @req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("CancelDelegationToken", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp623 = new InternalStructs.CancelDelegationToken_args() {
        Req = @req,
      };
      
      await tmp623.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TCancelDelegationTokenResp> recv_CancelDelegationToken(CancellationToken cancellationToken = default)
    {
      
      var tmp624 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp624.Type == TMessageType.Exception)
      {
        var tmp625 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp625;
      }

      var tmp626 = new InternalStructs.CancelDelegationToken_result();
      await tmp626.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp626.__isset.success)
      {
        return tmp626.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CancelDelegationToken failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TRenewDelegationTokenResp> RenewDelegationToken(TRenewDelegationTokenReq @req, CancellationToken cancellationToken = default)
    {
      await send_RenewDelegationToken(@req, cancellationToken);
      return await recv_RenewDelegationToken(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_RenewDelegationToken(TRenewDelegationTokenReq @req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("RenewDelegationToken", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp627 = new InternalStructs.RenewDelegationToken_args() {
        Req = @req,
      };
      
      await tmp627.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TRenewDelegationTokenResp> recv_RenewDelegationToken(CancellationToken cancellationToken = default)
    {
      
      var tmp628 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp628.Type == TMessageType.Exception)
      {
        var tmp629 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp629;
      }

      var tmp630 = new InternalStructs.RenewDelegationToken_result();
      await tmp630.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp630.__isset.success)
      {
        return tmp630.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RenewDelegationToken failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TGetQueryIdResp> GetQueryId(TGetQueryIdReq @req, CancellationToken cancellationToken = default)
    {
      await send_GetQueryId(@req, cancellationToken);
      return await recv_GetQueryId(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_GetQueryId(TGetQueryIdReq @req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetQueryId", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp631 = new InternalStructs.GetQueryId_args() {
        Req = @req,
      };
      
      await tmp631.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TGetQueryIdResp> recv_GetQueryId(CancellationToken cancellationToken = default)
    {
      
      var tmp632 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp632.Type == TMessageType.Exception)
      {
        var tmp633 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp633;
      }

      var tmp634 = new InternalStructs.GetQueryId_result();
      await tmp634.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp634.__isset.success)
      {
        return tmp634.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetQueryId failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TSetClientInfoResp> SetClientInfo(TSetClientInfoReq @req, CancellationToken cancellationToken = default)
    {
      await send_SetClientInfo(@req, cancellationToken);
      return await recv_SetClientInfo(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_SetClientInfo(TSetClientInfoReq @req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("SetClientInfo", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp635 = new InternalStructs.SetClientInfo_args() {
        Req = @req,
      };
      
      await tmp635.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TSetClientInfoResp> recv_SetClientInfo(CancellationToken cancellationToken = default)
    {
      
      var tmp636 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp636.Type == TMessageType.Exception)
      {
        var tmp637 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp637;
      }

      var tmp638 = new InternalStructs.SetClientInfo_result();
      await tmp638.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp638.__isset.success)
      {
        return tmp638.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetClientInfo failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TUploadDataResp> UploadData(TUploadDataReq @req, CancellationToken cancellationToken = default)
    {
      await send_UploadData(@req, cancellationToken);
      return await recv_UploadData(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_UploadData(TUploadDataReq @req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("UploadData", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp639 = new InternalStructs.UploadData_args() {
        Req = @req,
      };
      
      await tmp639.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TUploadDataResp> recv_UploadData(CancellationToken cancellationToken = default)
    {
      
      var tmp640 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp640.Type == TMessageType.Exception)
      {
        var tmp641 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp641;
      }

      var tmp642 = new InternalStructs.UploadData_result();
      await tmp642.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp642.__isset.success)
      {
        return tmp642.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UploadData failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TDownloadDataResp> DownloadData(TDownloadDataReq @req, CancellationToken cancellationToken = default)
    {
      await send_DownloadData(@req, cancellationToken);
      return await recv_DownloadData(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_DownloadData(TDownloadDataReq @req, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("DownloadData", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp643 = new InternalStructs.DownloadData_args() {
        Req = @req,
      };
      
      await tmp643.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TDownloadDataResp> recv_DownloadData(CancellationToken cancellationToken = default)
    {
      
      var tmp644 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp644.Type == TMessageType.Exception)
      {
        var tmp645 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp645;
      }

      var tmp646 = new InternalStructs.DownloadData_result();
      await tmp646.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp646.__isset.success)
      {
        return tmp646.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DownloadData failed: unknown result");
    }

  }

  public class AsyncProcessor : ITAsyncProcessor
  {
    private readonly IAsync _iAsync;
    private readonly ILogger<AsyncProcessor> _logger;

    public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
    {
      _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
      _logger = logger;
      processMap_["OpenSession"] = OpenSession_ProcessAsync;
      processMap_["CloseSession"] = CloseSession_ProcessAsync;
      processMap_["GetInfo"] = GetInfo_ProcessAsync;
      processMap_["ExecuteStatement"] = ExecuteStatement_ProcessAsync;
      processMap_["GetTypeInfo"] = GetTypeInfo_ProcessAsync;
      processMap_["GetCatalogs"] = GetCatalogs_ProcessAsync;
      processMap_["GetSchemas"] = GetSchemas_ProcessAsync;
      processMap_["GetTables"] = GetTables_ProcessAsync;
      processMap_["GetTableTypes"] = GetTableTypes_ProcessAsync;
      processMap_["GetColumns"] = GetColumns_ProcessAsync;
      processMap_["GetFunctions"] = GetFunctions_ProcessAsync;
      processMap_["GetPrimaryKeys"] = GetPrimaryKeys_ProcessAsync;
      processMap_["GetCrossReference"] = GetCrossReference_ProcessAsync;
      processMap_["GetOperationStatus"] = GetOperationStatus_ProcessAsync;
      processMap_["CancelOperation"] = CancelOperation_ProcessAsync;
      processMap_["CloseOperation"] = CloseOperation_ProcessAsync;
      processMap_["GetResultSetMetadata"] = GetResultSetMetadata_ProcessAsync;
      processMap_["FetchResults"] = FetchResults_ProcessAsync;
      processMap_["GetDelegationToken"] = GetDelegationToken_ProcessAsync;
      processMap_["CancelDelegationToken"] = CancelDelegationToken_ProcessAsync;
      processMap_["RenewDelegationToken"] = RenewDelegationToken_ProcessAsync;
      processMap_["GetQueryId"] = GetQueryId_ProcessAsync;
      processMap_["SetClientInfo"] = SetClientInfo_ProcessAsync;
      processMap_["UploadData"] = UploadData_ProcessAsync;
      processMap_["DownloadData"] = DownloadData_ProcessAsync;
    }

    protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
    {
      return await ProcessAsync(iprot, oprot, CancellationToken.None);
    }

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      try
      {
        var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

        processMap_.TryGetValue(msg.Name, out var fn);

        if (fn == null)
        {
          await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
          await iprot.ReadMessageEndAsync(cancellationToken);
          var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
          await oprot.WriteMessageEndAsync(cancellationToken);
          await oprot.Transport.FlushAsync(cancellationToken);
          return true;
        }

        await fn(msg.SeqID, iprot, oprot, cancellationToken);

      }
      catch (IOException)
      {
        return false;
      }

      return true;
    }

    public async global::System.Threading.Tasks.Task OpenSession_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp647 = new InternalStructs.OpenSession_args();
      await tmp647.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp648 = new InternalStructs.OpenSession_result();
      try
      {
        tmp648.Success = await _iAsync.OpenSession(tmp647.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("OpenSession", TMessageType.Reply, seqid), cancellationToken); 
        await tmp648.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp649)
      {
        var tmp650 = $"Error occurred in {GetType().FullName}: {tmp649.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp649, tmp650);
        else
          Console.Error.WriteLine(tmp650);
        var tmp651 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("OpenSession", TMessageType.Exception, seqid), cancellationToken);
        await tmp651.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task CloseSession_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp652 = new InternalStructs.CloseSession_args();
      await tmp652.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp653 = new InternalStructs.CloseSession_result();
      try
      {
        tmp653.Success = await _iAsync.CloseSession(tmp652.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("CloseSession", TMessageType.Reply, seqid), cancellationToken); 
        await tmp653.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp654)
      {
        var tmp655 = $"Error occurred in {GetType().FullName}: {tmp654.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp654, tmp655);
        else
          Console.Error.WriteLine(tmp655);
        var tmp656 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("CloseSession", TMessageType.Exception, seqid), cancellationToken);
        await tmp656.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task GetInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp657 = new InternalStructs.GetInfo_args();
      await tmp657.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp658 = new InternalStructs.GetInfo_result();
      try
      {
        tmp658.Success = await _iAsync.GetInfo(tmp657.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("GetInfo", TMessageType.Reply, seqid), cancellationToken); 
        await tmp658.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp659)
      {
        var tmp660 = $"Error occurred in {GetType().FullName}: {tmp659.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp659, tmp660);
        else
          Console.Error.WriteLine(tmp660);
        var tmp661 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("GetInfo", TMessageType.Exception, seqid), cancellationToken);
        await tmp661.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task ExecuteStatement_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp662 = new InternalStructs.ExecuteStatement_args();
      await tmp662.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp663 = new InternalStructs.ExecuteStatement_result();
      try
      {
        tmp663.Success = await _iAsync.ExecuteStatement(tmp662.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("ExecuteStatement", TMessageType.Reply, seqid), cancellationToken); 
        await tmp663.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp664)
      {
        var tmp665 = $"Error occurred in {GetType().FullName}: {tmp664.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp664, tmp665);
        else
          Console.Error.WriteLine(tmp665);
        var tmp666 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("ExecuteStatement", TMessageType.Exception, seqid), cancellationToken);
        await tmp666.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task GetTypeInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp667 = new InternalStructs.GetTypeInfo_args();
      await tmp667.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp668 = new InternalStructs.GetTypeInfo_result();
      try
      {
        tmp668.Success = await _iAsync.GetTypeInfo(tmp667.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("GetTypeInfo", TMessageType.Reply, seqid), cancellationToken); 
        await tmp668.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp669)
      {
        var tmp670 = $"Error occurred in {GetType().FullName}: {tmp669.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp669, tmp670);
        else
          Console.Error.WriteLine(tmp670);
        var tmp671 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("GetTypeInfo", TMessageType.Exception, seqid), cancellationToken);
        await tmp671.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task GetCatalogs_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp672 = new InternalStructs.GetCatalogs_args();
      await tmp672.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp673 = new InternalStructs.GetCatalogs_result();
      try
      {
        tmp673.Success = await _iAsync.GetCatalogs(tmp672.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("GetCatalogs", TMessageType.Reply, seqid), cancellationToken); 
        await tmp673.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp674)
      {
        var tmp675 = $"Error occurred in {GetType().FullName}: {tmp674.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp674, tmp675);
        else
          Console.Error.WriteLine(tmp675);
        var tmp676 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("GetCatalogs", TMessageType.Exception, seqid), cancellationToken);
        await tmp676.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task GetSchemas_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp677 = new InternalStructs.GetSchemas_args();
      await tmp677.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp678 = new InternalStructs.GetSchemas_result();
      try
      {
        tmp678.Success = await _iAsync.GetSchemas(tmp677.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("GetSchemas", TMessageType.Reply, seqid), cancellationToken); 
        await tmp678.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp679)
      {
        var tmp680 = $"Error occurred in {GetType().FullName}: {tmp679.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp679, tmp680);
        else
          Console.Error.WriteLine(tmp680);
        var tmp681 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("GetSchemas", TMessageType.Exception, seqid), cancellationToken);
        await tmp681.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task GetTables_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp682 = new InternalStructs.GetTables_args();
      await tmp682.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp683 = new InternalStructs.GetTables_result();
      try
      {
        tmp683.Success = await _iAsync.GetTables(tmp682.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("GetTables", TMessageType.Reply, seqid), cancellationToken); 
        await tmp683.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp684)
      {
        var tmp685 = $"Error occurred in {GetType().FullName}: {tmp684.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp684, tmp685);
        else
          Console.Error.WriteLine(tmp685);
        var tmp686 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("GetTables", TMessageType.Exception, seqid), cancellationToken);
        await tmp686.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task GetTableTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp687 = new InternalStructs.GetTableTypes_args();
      await tmp687.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp688 = new InternalStructs.GetTableTypes_result();
      try
      {
        tmp688.Success = await _iAsync.GetTableTypes(tmp687.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("GetTableTypes", TMessageType.Reply, seqid), cancellationToken); 
        await tmp688.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp689)
      {
        var tmp690 = $"Error occurred in {GetType().FullName}: {tmp689.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp689, tmp690);
        else
          Console.Error.WriteLine(tmp690);
        var tmp691 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("GetTableTypes", TMessageType.Exception, seqid), cancellationToken);
        await tmp691.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task GetColumns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp692 = new InternalStructs.GetColumns_args();
      await tmp692.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp693 = new InternalStructs.GetColumns_result();
      try
      {
        tmp693.Success = await _iAsync.GetColumns(tmp692.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("GetColumns", TMessageType.Reply, seqid), cancellationToken); 
        await tmp693.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp694)
      {
        var tmp695 = $"Error occurred in {GetType().FullName}: {tmp694.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp694, tmp695);
        else
          Console.Error.WriteLine(tmp695);
        var tmp696 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("GetColumns", TMessageType.Exception, seqid), cancellationToken);
        await tmp696.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task GetFunctions_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp697 = new InternalStructs.GetFunctions_args();
      await tmp697.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp698 = new InternalStructs.GetFunctions_result();
      try
      {
        tmp698.Success = await _iAsync.GetFunctions(tmp697.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("GetFunctions", TMessageType.Reply, seqid), cancellationToken); 
        await tmp698.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp699)
      {
        var tmp700 = $"Error occurred in {GetType().FullName}: {tmp699.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp699, tmp700);
        else
          Console.Error.WriteLine(tmp700);
        var tmp701 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("GetFunctions", TMessageType.Exception, seqid), cancellationToken);
        await tmp701.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task GetPrimaryKeys_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp702 = new InternalStructs.GetPrimaryKeys_args();
      await tmp702.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp703 = new InternalStructs.GetPrimaryKeys_result();
      try
      {
        tmp703.Success = await _iAsync.GetPrimaryKeys(tmp702.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("GetPrimaryKeys", TMessageType.Reply, seqid), cancellationToken); 
        await tmp703.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp704)
      {
        var tmp705 = $"Error occurred in {GetType().FullName}: {tmp704.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp704, tmp705);
        else
          Console.Error.WriteLine(tmp705);
        var tmp706 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("GetPrimaryKeys", TMessageType.Exception, seqid), cancellationToken);
        await tmp706.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task GetCrossReference_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp707 = new InternalStructs.GetCrossReference_args();
      await tmp707.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp708 = new InternalStructs.GetCrossReference_result();
      try
      {
        tmp708.Success = await _iAsync.GetCrossReference(tmp707.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("GetCrossReference", TMessageType.Reply, seqid), cancellationToken); 
        await tmp708.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp709)
      {
        var tmp710 = $"Error occurred in {GetType().FullName}: {tmp709.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp709, tmp710);
        else
          Console.Error.WriteLine(tmp710);
        var tmp711 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("GetCrossReference", TMessageType.Exception, seqid), cancellationToken);
        await tmp711.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task GetOperationStatus_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp712 = new InternalStructs.GetOperationStatus_args();
      await tmp712.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp713 = new InternalStructs.GetOperationStatus_result();
      try
      {
        tmp713.Success = await _iAsync.GetOperationStatus(tmp712.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("GetOperationStatus", TMessageType.Reply, seqid), cancellationToken); 
        await tmp713.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp714)
      {
        var tmp715 = $"Error occurred in {GetType().FullName}: {tmp714.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp714, tmp715);
        else
          Console.Error.WriteLine(tmp715);
        var tmp716 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("GetOperationStatus", TMessageType.Exception, seqid), cancellationToken);
        await tmp716.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task CancelOperation_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp717 = new InternalStructs.CancelOperation_args();
      await tmp717.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp718 = new InternalStructs.CancelOperation_result();
      try
      {
        tmp718.Success = await _iAsync.CancelOperation(tmp717.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("CancelOperation", TMessageType.Reply, seqid), cancellationToken); 
        await tmp718.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp719)
      {
        var tmp720 = $"Error occurred in {GetType().FullName}: {tmp719.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp719, tmp720);
        else
          Console.Error.WriteLine(tmp720);
        var tmp721 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("CancelOperation", TMessageType.Exception, seqid), cancellationToken);
        await tmp721.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task CloseOperation_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp722 = new InternalStructs.CloseOperation_args();
      await tmp722.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp723 = new InternalStructs.CloseOperation_result();
      try
      {
        tmp723.Success = await _iAsync.CloseOperation(tmp722.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("CloseOperation", TMessageType.Reply, seqid), cancellationToken); 
        await tmp723.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp724)
      {
        var tmp725 = $"Error occurred in {GetType().FullName}: {tmp724.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp724, tmp725);
        else
          Console.Error.WriteLine(tmp725);
        var tmp726 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("CloseOperation", TMessageType.Exception, seqid), cancellationToken);
        await tmp726.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task GetResultSetMetadata_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp727 = new InternalStructs.GetResultSetMetadata_args();
      await tmp727.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp728 = new InternalStructs.GetResultSetMetadata_result();
      try
      {
        tmp728.Success = await _iAsync.GetResultSetMetadata(tmp727.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("GetResultSetMetadata", TMessageType.Reply, seqid), cancellationToken); 
        await tmp728.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp729)
      {
        var tmp730 = $"Error occurred in {GetType().FullName}: {tmp729.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp729, tmp730);
        else
          Console.Error.WriteLine(tmp730);
        var tmp731 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("GetResultSetMetadata", TMessageType.Exception, seqid), cancellationToken);
        await tmp731.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task FetchResults_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp732 = new InternalStructs.FetchResults_args();
      await tmp732.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp733 = new InternalStructs.FetchResults_result();
      try
      {
        tmp733.Success = await _iAsync.FetchResults(tmp732.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("FetchResults", TMessageType.Reply, seqid), cancellationToken); 
        await tmp733.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp734)
      {
        var tmp735 = $"Error occurred in {GetType().FullName}: {tmp734.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp734, tmp735);
        else
          Console.Error.WriteLine(tmp735);
        var tmp736 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("FetchResults", TMessageType.Exception, seqid), cancellationToken);
        await tmp736.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task GetDelegationToken_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp737 = new InternalStructs.GetDelegationToken_args();
      await tmp737.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp738 = new InternalStructs.GetDelegationToken_result();
      try
      {
        tmp738.Success = await _iAsync.GetDelegationToken(tmp737.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("GetDelegationToken", TMessageType.Reply, seqid), cancellationToken); 
        await tmp738.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp739)
      {
        var tmp740 = $"Error occurred in {GetType().FullName}: {tmp739.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp739, tmp740);
        else
          Console.Error.WriteLine(tmp740);
        var tmp741 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("GetDelegationToken", TMessageType.Exception, seqid), cancellationToken);
        await tmp741.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task CancelDelegationToken_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp742 = new InternalStructs.CancelDelegationToken_args();
      await tmp742.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp743 = new InternalStructs.CancelDelegationToken_result();
      try
      {
        tmp743.Success = await _iAsync.CancelDelegationToken(tmp742.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("CancelDelegationToken", TMessageType.Reply, seqid), cancellationToken); 
        await tmp743.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp744)
      {
        var tmp745 = $"Error occurred in {GetType().FullName}: {tmp744.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp744, tmp745);
        else
          Console.Error.WriteLine(tmp745);
        var tmp746 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("CancelDelegationToken", TMessageType.Exception, seqid), cancellationToken);
        await tmp746.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task RenewDelegationToken_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp747 = new InternalStructs.RenewDelegationToken_args();
      await tmp747.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp748 = new InternalStructs.RenewDelegationToken_result();
      try
      {
        tmp748.Success = await _iAsync.RenewDelegationToken(tmp747.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("RenewDelegationToken", TMessageType.Reply, seqid), cancellationToken); 
        await tmp748.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp749)
      {
        var tmp750 = $"Error occurred in {GetType().FullName}: {tmp749.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp749, tmp750);
        else
          Console.Error.WriteLine(tmp750);
        var tmp751 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("RenewDelegationToken", TMessageType.Exception, seqid), cancellationToken);
        await tmp751.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task GetQueryId_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp752 = new InternalStructs.GetQueryId_args();
      await tmp752.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp753 = new InternalStructs.GetQueryId_result();
      try
      {
        tmp753.Success = await _iAsync.GetQueryId(tmp752.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("GetQueryId", TMessageType.Reply, seqid), cancellationToken); 
        await tmp753.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp754)
      {
        var tmp755 = $"Error occurred in {GetType().FullName}: {tmp754.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp754, tmp755);
        else
          Console.Error.WriteLine(tmp755);
        var tmp756 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("GetQueryId", TMessageType.Exception, seqid), cancellationToken);
        await tmp756.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task SetClientInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp757 = new InternalStructs.SetClientInfo_args();
      await tmp757.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp758 = new InternalStructs.SetClientInfo_result();
      try
      {
        tmp758.Success = await _iAsync.SetClientInfo(tmp757.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("SetClientInfo", TMessageType.Reply, seqid), cancellationToken); 
        await tmp758.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp759)
      {
        var tmp760 = $"Error occurred in {GetType().FullName}: {tmp759.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp759, tmp760);
        else
          Console.Error.WriteLine(tmp760);
        var tmp761 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("SetClientInfo", TMessageType.Exception, seqid), cancellationToken);
        await tmp761.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task UploadData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp762 = new InternalStructs.UploadData_args();
      await tmp762.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp763 = new InternalStructs.UploadData_result();
      try
      {
        tmp763.Success = await _iAsync.UploadData(tmp762.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("UploadData", TMessageType.Reply, seqid), cancellationToken); 
        await tmp763.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp764)
      {
        var tmp765 = $"Error occurred in {GetType().FullName}: {tmp764.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp764, tmp765);
        else
          Console.Error.WriteLine(tmp765);
        var tmp766 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("UploadData", TMessageType.Exception, seqid), cancellationToken);
        await tmp766.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task DownloadData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp767 = new InternalStructs.DownloadData_args();
      await tmp767.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp768 = new InternalStructs.DownloadData_result();
      try
      {
        tmp768.Success = await _iAsync.DownloadData(tmp767.Req, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("DownloadData", TMessageType.Reply, seqid), cancellationToken); 
        await tmp768.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp769)
      {
        var tmp770 = $"Error occurred in {GetType().FullName}: {tmp769.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp769, tmp770);
        else
          Console.Error.WriteLine(tmp770);
        var tmp771 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("DownloadData", TMessageType.Exception, seqid), cancellationToken);
        await tmp771.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

  }

  public class InternalStructs
  {

    public partial class OpenSession_args : TBase
    {
      private TOpenSessionReq _req;

      public TOpenSessionReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.@req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @req;
      }

      public OpenSession_args()
      {
      }

      public OpenSession_args DeepCopy()
      {
        var tmp772 = new OpenSession_args();
        if((Req != null) && __isset.@req)
        {
          tmp772.Req = (TOpenSessionReq)this.Req.DeepCopy();
        }
        tmp772.__isset.@req = this.__isset.@req;
        return tmp772;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TOpenSessionReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp773 = new TStruct("OpenSession_args");
          await oprot.WriteStructBeginAsync(tmp773, cancellationToken);
          var tmp774 = new TField();
          if((Req != null) && __isset.@req)
          {
            tmp774.Name = "req";
            tmp774.Type = TType.Struct;
            tmp774.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp774, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is OpenSession_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.@req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("OpenSession_args(");
        int tmp776 = 0;
        if((Req != null) && __isset.@req)
        {
          if(0 < tmp776++) { sb.Append(", "); }
          sb.Append("Req: ");
          sb.Append(Req);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class OpenSession_result : TBase
    {
      private TOpenSessionResp _success;

      public TOpenSessionResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
      }

      public OpenSession_result()
      {
      }

      public OpenSession_result DeepCopy()
      {
        var tmp777 = new OpenSession_result();
        if((Success != null) && __isset.@success)
        {
          tmp777.Success = (TOpenSessionResp)this.Success.DeepCopy();
        }
        tmp777.__isset.@success = this.__isset.@success;
        return tmp777;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TOpenSessionResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp778 = new TStruct("OpenSession_result");
          await oprot.WriteStructBeginAsync(tmp778, cancellationToken);
          var tmp779 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp779.Name = "Success";
              tmp779.Type = TType.Struct;
              tmp779.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp779, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is OpenSession_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("OpenSession_result(");
        int tmp781 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp781++) { sb.Append(", "); }
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class CloseSession_args : TBase
    {
      private TCloseSessionReq _req;

      public TCloseSessionReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.@req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @req;
      }

      public CloseSession_args()
      {
      }

      public CloseSession_args DeepCopy()
      {
        var tmp782 = new CloseSession_args();
        if((Req != null) && __isset.@req)
        {
          tmp782.Req = (TCloseSessionReq)this.Req.DeepCopy();
        }
        tmp782.__isset.@req = this.__isset.@req;
        return tmp782;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TCloseSessionReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp783 = new TStruct("CloseSession_args");
          await oprot.WriteStructBeginAsync(tmp783, cancellationToken);
          var tmp784 = new TField();
          if((Req != null) && __isset.@req)
          {
            tmp784.Name = "req";
            tmp784.Type = TType.Struct;
            tmp784.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp784, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is CloseSession_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.@req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("CloseSession_args(");
        int tmp786 = 0;
        if((Req != null) && __isset.@req)
        {
          if(0 < tmp786++) { sb.Append(", "); }
          sb.Append("Req: ");
          sb.Append(Req);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class CloseSession_result : TBase
    {
      private TCloseSessionResp _success;

      public TCloseSessionResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
      }

      public CloseSession_result()
      {
      }

      public CloseSession_result DeepCopy()
      {
        var tmp787 = new CloseSession_result();
        if((Success != null) && __isset.@success)
        {
          tmp787.Success = (TCloseSessionResp)this.Success.DeepCopy();
        }
        tmp787.__isset.@success = this.__isset.@success;
        return tmp787;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TCloseSessionResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp788 = new TStruct("CloseSession_result");
          await oprot.WriteStructBeginAsync(tmp788, cancellationToken);
          var tmp789 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp789.Name = "Success";
              tmp789.Type = TType.Struct;
              tmp789.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp789, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is CloseSession_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("CloseSession_result(");
        int tmp791 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp791++) { sb.Append(", "); }
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class GetInfo_args : TBase
    {
      private TGetInfoReq _req;

      public TGetInfoReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.@req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @req;
      }

      public GetInfo_args()
      {
      }

      public GetInfo_args DeepCopy()
      {
        var tmp792 = new GetInfo_args();
        if((Req != null) && __isset.@req)
        {
          tmp792.Req = (TGetInfoReq)this.Req.DeepCopy();
        }
        tmp792.__isset.@req = this.__isset.@req;
        return tmp792;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TGetInfoReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp793 = new TStruct("GetInfo_args");
          await oprot.WriteStructBeginAsync(tmp793, cancellationToken);
          var tmp794 = new TField();
          if((Req != null) && __isset.@req)
          {
            tmp794.Name = "req";
            tmp794.Type = TType.Struct;
            tmp794.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp794, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is GetInfo_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.@req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GetInfo_args(");
        int tmp796 = 0;
        if((Req != null) && __isset.@req)
        {
          if(0 < tmp796++) { sb.Append(", "); }
          sb.Append("Req: ");
          sb.Append(Req);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class GetInfo_result : TBase
    {
      private TGetInfoResp _success;

      public TGetInfoResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
      }

      public GetInfo_result()
      {
      }

      public GetInfo_result DeepCopy()
      {
        var tmp797 = new GetInfo_result();
        if((Success != null) && __isset.@success)
        {
          tmp797.Success = (TGetInfoResp)this.Success.DeepCopy();
        }
        tmp797.__isset.@success = this.__isset.@success;
        return tmp797;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TGetInfoResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp798 = new TStruct("GetInfo_result");
          await oprot.WriteStructBeginAsync(tmp798, cancellationToken);
          var tmp799 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp799.Name = "Success";
              tmp799.Type = TType.Struct;
              tmp799.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp799, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is GetInfo_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GetInfo_result(");
        int tmp801 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp801++) { sb.Append(", "); }
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class ExecuteStatement_args : TBase
    {
      private TExecuteStatementReq _req;

      public TExecuteStatementReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.@req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @req;
      }

      public ExecuteStatement_args()
      {
      }

      public ExecuteStatement_args DeepCopy()
      {
        var tmp802 = new ExecuteStatement_args();
        if((Req != null) && __isset.@req)
        {
          tmp802.Req = (TExecuteStatementReq)this.Req.DeepCopy();
        }
        tmp802.__isset.@req = this.__isset.@req;
        return tmp802;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TExecuteStatementReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp803 = new TStruct("ExecuteStatement_args");
          await oprot.WriteStructBeginAsync(tmp803, cancellationToken);
          var tmp804 = new TField();
          if((Req != null) && __isset.@req)
          {
            tmp804.Name = "req";
            tmp804.Type = TType.Struct;
            tmp804.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp804, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is ExecuteStatement_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.@req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("ExecuteStatement_args(");
        int tmp806 = 0;
        if((Req != null) && __isset.@req)
        {
          if(0 < tmp806++) { sb.Append(", "); }
          sb.Append("Req: ");
          sb.Append(Req);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class ExecuteStatement_result : TBase
    {
      private TExecuteStatementResp _success;

      public TExecuteStatementResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
      }

      public ExecuteStatement_result()
      {
      }

      public ExecuteStatement_result DeepCopy()
      {
        var tmp807 = new ExecuteStatement_result();
        if((Success != null) && __isset.@success)
        {
          tmp807.Success = (TExecuteStatementResp)this.Success.DeepCopy();
        }
        tmp807.__isset.@success = this.__isset.@success;
        return tmp807;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TExecuteStatementResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp808 = new TStruct("ExecuteStatement_result");
          await oprot.WriteStructBeginAsync(tmp808, cancellationToken);
          var tmp809 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp809.Name = "Success";
              tmp809.Type = TType.Struct;
              tmp809.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp809, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is ExecuteStatement_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("ExecuteStatement_result(");
        int tmp811 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp811++) { sb.Append(", "); }
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class GetTypeInfo_args : TBase
    {
      private TGetTypeInfoReq _req;

      public TGetTypeInfoReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.@req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @req;
      }

      public GetTypeInfo_args()
      {
      }

      public GetTypeInfo_args DeepCopy()
      {
        var tmp812 = new GetTypeInfo_args();
        if((Req != null) && __isset.@req)
        {
          tmp812.Req = (TGetTypeInfoReq)this.Req.DeepCopy();
        }
        tmp812.__isset.@req = this.__isset.@req;
        return tmp812;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TGetTypeInfoReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp813 = new TStruct("GetTypeInfo_args");
          await oprot.WriteStructBeginAsync(tmp813, cancellationToken);
          var tmp814 = new TField();
          if((Req != null) && __isset.@req)
          {
            tmp814.Name = "req";
            tmp814.Type = TType.Struct;
            tmp814.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp814, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is GetTypeInfo_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.@req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GetTypeInfo_args(");
        int tmp816 = 0;
        if((Req != null) && __isset.@req)
        {
          if(0 < tmp816++) { sb.Append(", "); }
          sb.Append("Req: ");
          sb.Append(Req);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class GetTypeInfo_result : TBase
    {
      private TGetTypeInfoResp _success;

      public TGetTypeInfoResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
      }

      public GetTypeInfo_result()
      {
      }

      public GetTypeInfo_result DeepCopy()
      {
        var tmp817 = new GetTypeInfo_result();
        if((Success != null) && __isset.@success)
        {
          tmp817.Success = (TGetTypeInfoResp)this.Success.DeepCopy();
        }
        tmp817.__isset.@success = this.__isset.@success;
        return tmp817;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TGetTypeInfoResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp818 = new TStruct("GetTypeInfo_result");
          await oprot.WriteStructBeginAsync(tmp818, cancellationToken);
          var tmp819 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp819.Name = "Success";
              tmp819.Type = TType.Struct;
              tmp819.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp819, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is GetTypeInfo_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GetTypeInfo_result(");
        int tmp821 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp821++) { sb.Append(", "); }
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class GetCatalogs_args : TBase
    {
      private TGetCatalogsReq _req;

      public TGetCatalogsReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.@req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @req;
      }

      public GetCatalogs_args()
      {
      }

      public GetCatalogs_args DeepCopy()
      {
        var tmp822 = new GetCatalogs_args();
        if((Req != null) && __isset.@req)
        {
          tmp822.Req = (TGetCatalogsReq)this.Req.DeepCopy();
        }
        tmp822.__isset.@req = this.__isset.@req;
        return tmp822;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TGetCatalogsReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp823 = new TStruct("GetCatalogs_args");
          await oprot.WriteStructBeginAsync(tmp823, cancellationToken);
          var tmp824 = new TField();
          if((Req != null) && __isset.@req)
          {
            tmp824.Name = "req";
            tmp824.Type = TType.Struct;
            tmp824.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp824, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is GetCatalogs_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.@req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp825 = new StringBuilder("GetCatalogs_args(");
        int tmp826 = 0;
        if((Req != null) && __isset.@req)
        {
          if(0 < tmp826++) { tmp825.Append(", "); }
          tmp825.Append("Req: ");
          Req.ToString(tmp825);
        }
        tmp825.Append(')');
        return tmp825.ToString();
      }
    }


    public partial class GetCatalogs_result : TBase
    {
      private TGetCatalogsResp _success;

      public TGetCatalogsResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
      }

      public GetCatalogs_result()
      {
      }

      public GetCatalogs_result DeepCopy()
      {
        var tmp827 = new GetCatalogs_result();
        if((Success != null) && __isset.@success)
        {
          tmp827.Success = (TGetCatalogsResp)this.Success.DeepCopy();
        }
        tmp827.__isset.@success = this.__isset.@success;
        return tmp827;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TGetCatalogsResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp828 = new TStruct("GetCatalogs_result");
          await oprot.WriteStructBeginAsync(tmp828, cancellationToken);
          var tmp829 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp829.Name = "Success";
              tmp829.Type = TType.Struct;
              tmp829.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp829, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is GetCatalogs_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GetCatalogs_result(");
        int tmp831 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp831++) { sb.Append(", "); }
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class GetSchemas_args : TBase
    {
      private TGetSchemasReq _req;

      public TGetSchemasReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.@req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @req;
      }

      public GetSchemas_args()
      {
      }

      public GetSchemas_args DeepCopy()
      {
        var tmp832 = new GetSchemas_args();
        if((Req != null) && __isset.@req)
        {
          tmp832.Req = (TGetSchemasReq)this.Req.DeepCopy();
        }
        tmp832.__isset.@req = this.__isset.@req;
        return tmp832;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TGetSchemasReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp833 = new TStruct("GetSchemas_args");
          await oprot.WriteStructBeginAsync(tmp833, cancellationToken);
          var tmp834 = new TField();
          if((Req != null) && __isset.@req)
          {
            tmp834.Name = "req";
            tmp834.Type = TType.Struct;
            tmp834.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp834, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is GetSchemas_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.@req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GetSchemas_args(");
        int tmp836 = 0;
        if((Req != null) && __isset.@req)
        {
          if(0 < tmp836++) { sb.Append(", "); }
          sb.Append("Req: ");
          sb.Append(Req);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class GetSchemas_result : TBase
    {
      private TGetSchemasResp _success;

      public TGetSchemasResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
      }

      public GetSchemas_result()
      {
      }

      public GetSchemas_result DeepCopy()
      {
        var tmp837 = new GetSchemas_result();
        if((Success != null) && __isset.@success)
        {
          tmp837.Success = (TGetSchemasResp)this.Success.DeepCopy();
        }
        tmp837.__isset.@success = this.__isset.@success;
        return tmp837;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TGetSchemasResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp838 = new TStruct("GetSchemas_result");
          await oprot.WriteStructBeginAsync(tmp838, cancellationToken);
          var tmp839 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp839.Name = "Success";
              tmp839.Type = TType.Struct;
              tmp839.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp839, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is GetSchemas_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GetSchemas_result(");
        int tmp841 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp841++) { sb.Append(", "); }
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class GetTables_args : TBase
    {
      private TGetTablesReq _req;

      public TGetTablesReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.@req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @req;
      }

      public GetTables_args()
      {
      }

      public GetTables_args DeepCopy()
      {
        var tmp842 = new GetTables_args();
        if((Req != null) && __isset.@req)
        {
          tmp842.Req = (TGetTablesReq)this.Req.DeepCopy();
        }
        tmp842.__isset.@req = this.__isset.@req;
        return tmp842;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TGetTablesReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp843 = new TStruct("GetTables_args");
          await oprot.WriteStructBeginAsync(tmp843, cancellationToken);
          var tmp844 = new TField();
          if((Req != null) && __isset.@req)
          {
            tmp844.Name = "req";
            tmp844.Type = TType.Struct;
            tmp844.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp844, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is GetTables_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.@req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GetTables_args(");
        int tmp846 = 0;
        if((Req != null) && __isset.@req)
        {
          if(0 < tmp846++) { sb.Append(", "); }
          sb.Append("Req: ");
          sb.Append(Req);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class GetTables_result : TBase
    {
      private TGetTablesResp _success;

      public TGetTablesResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
      }

      public GetTables_result()
      {
      }

      public GetTables_result DeepCopy()
      {
        var tmp847 = new GetTables_result();
        if((Success != null) && __isset.@success)
        {
          tmp847.Success = (TGetTablesResp)this.Success.DeepCopy();
        }
        tmp847.__isset.@success = this.__isset.@success;
        return tmp847;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TGetTablesResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp848 = new TStruct("GetTables_result");
          await oprot.WriteStructBeginAsync(tmp848, cancellationToken);
          var tmp849 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp849.Name = "Success";
              tmp849.Type = TType.Struct;
              tmp849.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp849, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is GetTables_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GetTables_result(");
        int tmp851 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp851++) { sb.Append(", "); }
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class GetTableTypes_args : TBase
    {
      private TGetTableTypesReq _req;

      public TGetTableTypesReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.@req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @req;
      }

      public GetTableTypes_args()
      {
      }

      public GetTableTypes_args DeepCopy()
      {
        var tmp852 = new GetTableTypes_args();
        if((Req != null) && __isset.@req)
        {
          tmp852.Req = (TGetTableTypesReq)this.Req.DeepCopy();
        }
        tmp852.__isset.@req = this.__isset.@req;
        return tmp852;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TGetTableTypesReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp853 = new TStruct("GetTableTypes_args");
          await oprot.WriteStructBeginAsync(tmp853, cancellationToken);
          var tmp854 = new TField();
          if((Req != null) && __isset.@req)
          {
            tmp854.Name = "req";
            tmp854.Type = TType.Struct;
            tmp854.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp854, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is GetTableTypes_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.@req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GetTableTypes_args(");
        int tmp856 = 0;
        if((Req != null) && __isset.@req)
        {
          if(0 < tmp856++) { sb.Append(", "); }
          sb.Append("Req: ");
          sb.Append(Req);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class GetTableTypes_result : TBase
    {
      private TGetTableTypesResp _success;

      public TGetTableTypesResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
      }

      public GetTableTypes_result()
      {
      }

      public GetTableTypes_result DeepCopy()
      {
        var tmp857 = new GetTableTypes_result();
        if((Success != null) && __isset.@success)
        {
          tmp857.Success = (TGetTableTypesResp)this.Success.DeepCopy();
        }
        tmp857.__isset.@success = this.__isset.@success;
        return tmp857;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TGetTableTypesResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp858 = new TStruct("GetTableTypes_result");
          await oprot.WriteStructBeginAsync(tmp858, cancellationToken);
          var tmp859 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp859.Name = "Success";
              tmp859.Type = TType.Struct;
              tmp859.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp859, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is GetTableTypes_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GetTableTypes_result(");
        int tmp861 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp861++) { sb.Append(", "); }
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class GetColumns_args : TBase
    {
      private TGetColumnsReq _req;

      public TGetColumnsReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.@req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @req;
      }

      public GetColumns_args()
      {
      }

      public GetColumns_args DeepCopy()
      {
        var tmp862 = new GetColumns_args();
        if((Req != null) && __isset.@req)
        {
          tmp862.Req = (TGetColumnsReq)this.Req.DeepCopy();
        }
        tmp862.__isset.@req = this.__isset.@req;
        return tmp862;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TGetColumnsReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp863 = new TStruct("GetColumns_args");
          await oprot.WriteStructBeginAsync(tmp863, cancellationToken);
          var tmp864 = new TField();
          if((Req != null) && __isset.@req)
          {
            tmp864.Name = "req";
            tmp864.Type = TType.Struct;
            tmp864.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp864, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is GetColumns_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.@req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GetColumns_args(");
        int tmp866 = 0;
        if((Req != null) && __isset.@req)
        {
          if(0 < tmp866++) { sb.Append(", "); }
          sb.Append("Req: ");
          sb.Append(Req);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class GetColumns_result : TBase
    {
      private TGetColumnsResp _success;

      public TGetColumnsResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
      }

      public GetColumns_result()
      {
      }

      public GetColumns_result DeepCopy()
      {
        var tmp867 = new GetColumns_result();
        if((Success != null) && __isset.@success)
        {
          tmp867.Success = (TGetColumnsResp)this.Success.DeepCopy();
        }
        tmp867.__isset.@success = this.__isset.@success;
        return tmp867;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TGetColumnsResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp868 = new TStruct("GetColumns_result");
          await oprot.WriteStructBeginAsync(tmp868, cancellationToken);
          var tmp869 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp869.Name = "Success";
              tmp869.Type = TType.Struct;
              tmp869.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp869, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is GetColumns_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GetColumns_result(");
        int tmp871 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp871++) { sb.Append(", "); }
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class GetFunctions_args : TBase
    {
      private TGetFunctionsReq _req;

      public TGetFunctionsReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.@req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @req;
      }

      public GetFunctions_args()
      {
      }

      public GetFunctions_args DeepCopy()
      {
        var tmp872 = new GetFunctions_args();
        if((Req != null) && __isset.@req)
        {
          tmp872.Req = (TGetFunctionsReq)this.Req.DeepCopy();
        }
        tmp872.__isset.@req = this.__isset.@req;
        return tmp872;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TGetFunctionsReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp873 = new TStruct("GetFunctions_args");
          await oprot.WriteStructBeginAsync(tmp873, cancellationToken);
          var tmp874 = new TField();
          if((Req != null) && __isset.@req)
          {
            tmp874.Name = "req";
            tmp874.Type = TType.Struct;
            tmp874.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp874, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is GetFunctions_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.@req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GetFunctions_args(");
        int tmp876 = 0;
        if((Req != null) && __isset.@req)
        {
          if(0 < tmp876++) { sb.Append(", "); }
          sb.Append("Req: ");
          sb.Append(Req);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class GetFunctions_result : TBase
    {
      private TGetFunctionsResp _success;

      public TGetFunctionsResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
      }

      public GetFunctions_result()
      {
      }

      public GetFunctions_result DeepCopy()
      {
        var tmp877 = new GetFunctions_result();
        if((Success != null) && __isset.@success)
        {
          tmp877.Success = (TGetFunctionsResp)this.Success.DeepCopy();
        }
        tmp877.__isset.@success = this.__isset.@success;
        return tmp877;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TGetFunctionsResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp878 = new TStruct("GetFunctions_result");
          await oprot.WriteStructBeginAsync(tmp878, cancellationToken);
          var tmp879 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp879.Name = "Success";
              tmp879.Type = TType.Struct;
              tmp879.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp879, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is GetFunctions_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GetFunctions_result(");
        int tmp881 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp881++) { sb.Append(", "); }
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class GetPrimaryKeys_args : TBase
    {
      private TGetPrimaryKeysReq _req;

      public TGetPrimaryKeysReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.@req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @req;
      }

      public GetPrimaryKeys_args()
      {
      }

      public GetPrimaryKeys_args DeepCopy()
      {
        var tmp882 = new GetPrimaryKeys_args();
        if((Req != null) && __isset.@req)
        {
          tmp882.Req = (TGetPrimaryKeysReq)this.Req.DeepCopy();
        }
        tmp882.__isset.@req = this.__isset.@req;
        return tmp882;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TGetPrimaryKeysReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp883 = new TStruct("GetPrimaryKeys_args");
          await oprot.WriteStructBeginAsync(tmp883, cancellationToken);
          var tmp884 = new TField();
          if((Req != null) && __isset.@req)
          {
            tmp884.Name = "req";
            tmp884.Type = TType.Struct;
            tmp884.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp884, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is GetPrimaryKeys_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.@req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GetPrimaryKeys_args(");
        int tmp886 = 0;
        if((Req != null) && __isset.@req)
        {
          if(0 < tmp886++) { sb.Append(", "); }
          sb.Append("Req: ");
          sb.Append(Req);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class GetPrimaryKeys_result : TBase
    {
      private TGetPrimaryKeysResp _success;

      public TGetPrimaryKeysResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
      }

      public GetPrimaryKeys_result()
      {
      }

      public GetPrimaryKeys_result DeepCopy()
      {
        var tmp887 = new GetPrimaryKeys_result();
        if((Success != null) && __isset.@success)
        {
          tmp887.Success = (TGetPrimaryKeysResp)this.Success.DeepCopy();
        }
        tmp887.__isset.@success = this.__isset.@success;
        return tmp887;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TGetPrimaryKeysResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp888 = new TStruct("GetPrimaryKeys_result");
          await oprot.WriteStructBeginAsync(tmp888, cancellationToken);
          var tmp889 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp889.Name = "Success";
              tmp889.Type = TType.Struct;
              tmp889.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp889, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is GetPrimaryKeys_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GetPrimaryKeys_result(");
        int tmp891 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp891++) { sb.Append(", "); }
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class GetCrossReference_args : TBase
    {
      private TGetCrossReferenceReq _req;

      public TGetCrossReferenceReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.@req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @req;
      }

      public GetCrossReference_args()
      {
      }

      public GetCrossReference_args DeepCopy()
      {
        var tmp892 = new GetCrossReference_args();
        
        if((Req != null) && __isset.@req)
        {
          tmp892.Req = (TGetCrossReferenceReq)this.Req.DeepCopy();
        }
        tmp892.__isset.@req = this.__isset.@req;
        return tmp892;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TGetCrossReferenceReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp893 = new TStruct("GetCrossReference_args");
          await oprot.WriteStructBeginAsync(tmp893, cancellationToken);
          var tmp894 = new TField();
          if((Req != null) && __isset.@req)
          {
            tmp894.Name = "req";
            tmp894.Type = TType.Struct;
            tmp894.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp894, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is GetCrossReference_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.@req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GetCrossReference_args(");
        int tmp896 = 0;
        if((Req != null) && __isset.@req)
        {
          if(0 < tmp896++) { sb.Append(", "); }
          sb.Append("Req: ");
          sb.Append(Req);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class GetCrossReference_result : TBase
    {
      private TGetCrossReferenceResp _success;

      public TGetCrossReferenceResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
      }

      public GetCrossReference_result()
      {
      }

      public GetCrossReference_result DeepCopy()
      {
        var tmp897 = new GetCrossReference_result();
        if((Success != null) && __isset.@success)
        {
          tmp897.Success = (TGetCrossReferenceResp)this.Success.DeepCopy();
        }
        tmp897.__isset.@success = this.__isset.@success;
        return tmp897;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TGetCrossReferenceResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp898 = new TStruct("GetCrossReference_result");
          await oprot.WriteStructBeginAsync(tmp898, cancellationToken);
          var tmp899 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp899.Name = "Success";
              tmp899.Type = TType.Struct;
              tmp899.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp899, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is GetCrossReference_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GetCrossReference_result(");
        int tmp901 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp901++) { sb.Append(", "); }
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class GetOperationStatus_args : TBase
    {
      private TGetOperationStatusReq _req;

      public TGetOperationStatusReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.@req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @req;
      }

      public GetOperationStatus_args()
      {
      }

      public GetOperationStatus_args DeepCopy()
      {
        var tmp902 = new GetOperationStatus_args();
        if((Req != null) && __isset.@req)
        {
          tmp902.Req = (TGetOperationStatusReq)this.Req.DeepCopy();
        }
        tmp902.__isset.@req = this.__isset.@req;
        return tmp902;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TGetOperationStatusReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp903 = new TStruct("GetOperationStatus_args");
          await oprot.WriteStructBeginAsync(tmp903, cancellationToken);
          var tmp904 = new TField();
          if((Req != null) && __isset.@req)
          {
            tmp904.Name = "req";
            tmp904.Type = TType.Struct;
            tmp904.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp904, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is GetOperationStatus_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.@req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GetOperationStatus_args(");
        int tmp906 = 0;
        if((Req != null) && __isset.@req)
        {
          if(0 < tmp906++) { sb.Append(", "); }
          sb.Append("Req: ");
          sb.Append(Req);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class GetOperationStatus_result : TBase
    {
      private TGetOperationStatusResp _success;

      public TGetOperationStatusResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
      }

      public GetOperationStatus_result()
      {
      }

      public GetOperationStatus_result DeepCopy()
      {
        var tmp907 = new GetOperationStatus_result();
        if((Success != null) && __isset.@success)
        {
          tmp907.Success = (TGetOperationStatusResp)this.Success.DeepCopy();
        }
        tmp907.__isset.@success = this.__isset.@success;
        return tmp907;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TGetOperationStatusResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp908 = new TStruct("GetOperationStatus_result");
          await oprot.WriteStructBeginAsync(tmp908, cancellationToken);
          var tmp909 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp909.Name = "Success";
              tmp909.Type = TType.Struct;
              tmp909.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp909, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is GetOperationStatus_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GetOperationStatus_result(");
        int tmp911 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp911++) { sb.Append(", "); }
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class CancelOperation_args : TBase
    {
      private TCancelOperationReq _req;

      public TCancelOperationReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.@req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @req;
      }

      public CancelOperation_args()
      {
      }

      public CancelOperation_args DeepCopy()
      {
        var tmp912 = new CancelOperation_args();
        if((Req != null) && __isset.@req)
        {
          tmp912.Req = (TCancelOperationReq)this.Req.DeepCopy();
        }
        tmp912.__isset.@req = this.__isset.@req;
        return tmp912;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TCancelOperationReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp913 = new TStruct("CancelOperation_args");
          await oprot.WriteStructBeginAsync(tmp913, cancellationToken);
          var tmp914 = new TField();
          if((Req != null) && __isset.@req)
          {
            tmp914.Name = "req";
            tmp914.Type = TType.Struct;
            tmp914.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp914, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is CancelOperation_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.@req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("CancelOperation_args(");
        int tmp916 = 0;
        if((Req != null) && __isset.@req)
        {
          if(0 < tmp916++) { sb.Append(", "); }
          sb.Append("Req: ");
          sb.Append(Req);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class CancelOperation_result : TBase
    {
      private TCancelOperationResp _success;

      public TCancelOperationResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
      }

      public CancelOperation_result()
      {
      }

      public CancelOperation_result DeepCopy()
      {
        var tmp917 = new CancelOperation_result();
        if((Success != null) && __isset.@success)
        {
          tmp917.Success = (TCancelOperationResp)this.Success.DeepCopy();
        }
        tmp917.__isset.@success = this.__isset.@success;
        return tmp917;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TCancelOperationResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp918 = new TStruct("CancelOperation_result");
          await oprot.WriteStructBeginAsync(tmp918, cancellationToken);
          var tmp919 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp919.Name = "Success";
              tmp919.Type = TType.Struct;
              tmp919.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp919, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is CancelOperation_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("CancelOperation_result(");
        int tmp921 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp921++) { sb.Append(", "); }
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class CloseOperation_args : TBase
    {
      private TCloseOperationReq _req;

      public TCloseOperationReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.@req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @req;
      }

      public CloseOperation_args()
      {
      }

      public CloseOperation_args DeepCopy()
      {
        var tmp922 = new CloseOperation_args();
        if((Req != null) && __isset.@req)
        {
          tmp922.Req = (TCloseOperationReq)this.Req.DeepCopy();
        }
        tmp922.__isset.@req = this.__isset.@req;
        return tmp922;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TCloseOperationReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp923 = new TStruct("CloseOperation_args");
          await oprot.WriteStructBeginAsync(tmp923, cancellationToken);
          var tmp924 = new TField();
          if((Req != null) && __isset.@req)
          {
            tmp924.Name = "req";
            tmp924.Type = TType.Struct;
            tmp924.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp924, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is CloseOperation_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.@req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("CloseOperation_args(");
        int tmp926 = 0;
        if((Req != null) && __isset.@req)
        {
          if(0 < tmp926++) { sb.Append(", "); }
          sb.Append("Req: ");
          sb.Append(Req);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class CloseOperation_result : TBase
    {
      private TCloseOperationResp _success;

      public TCloseOperationResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
      }

      public CloseOperation_result()
      {
      }

      public CloseOperation_result DeepCopy()
      {
        var tmp927 = new CloseOperation_result();
        if((Success != null) && __isset.@success)
        {
          tmp927.Success = (TCloseOperationResp)this.Success.DeepCopy();
        }
        tmp927.__isset.@success = this.__isset.@success;
        return tmp927;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TCloseOperationResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp928 = new TStruct("CloseOperation_result");
          await oprot.WriteStructBeginAsync(tmp928, cancellationToken);
          var tmp929 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp929.Name = "Success";
              tmp929.Type = TType.Struct;
              tmp929.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp929, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is CloseOperation_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("CloseOperation_result(");
        int tmp931 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp931++) { sb.Append(", "); }
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class GetResultSetMetadata_args : TBase
    {
      private TGetResultSetMetadataReq _req;

      public TGetResultSetMetadataReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.@req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @req;
      }

      public GetResultSetMetadata_args()
      {
      }

      public GetResultSetMetadata_args DeepCopy()
      {
        var tmp932 = new GetResultSetMetadata_args();
        if((Req != null) && __isset.@req)
        {
          tmp932.Req = (TGetResultSetMetadataReq)this.Req.DeepCopy();
        }
        tmp932.__isset.@req = this.__isset.@req;
        return tmp932;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TGetResultSetMetadataReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp933 = new TStruct("GetResultSetMetadata_args");
          await oprot.WriteStructBeginAsync(tmp933, cancellationToken);
          var tmp934 = new TField();
          if((Req != null) && __isset.@req)
          {
            tmp934.Name = "req";
            tmp934.Type = TType.Struct;
            tmp934.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp934, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is GetResultSetMetadata_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.@req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GetResultSetMetadata_args(");
        int tmp936 = 0;
        if((Req != null) && __isset.@req)
        {
          if(0 < tmp936++) { sb.Append(", "); }
          sb.Append("Req: ");
          sb.Append(Req);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class GetResultSetMetadata_result : TBase
    {
      private TGetResultSetMetadataResp _success;

      public TGetResultSetMetadataResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
      }

      public GetResultSetMetadata_result()
      {
      }

      public GetResultSetMetadata_result DeepCopy()
      {
        var tmp937 = new GetResultSetMetadata_result();
        if((Success != null) && __isset.@success)
        {
          tmp937.Success = (TGetResultSetMetadataResp)this.Success.DeepCopy();
        }
        tmp937.__isset.@success = this.__isset.@success;
        return tmp937;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TGetResultSetMetadataResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp938 = new TStruct("GetResultSetMetadata_result");
          await oprot.WriteStructBeginAsync(tmp938, cancellationToken);
          var tmp939 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp939.Name = "Success";
              tmp939.Type = TType.Struct;
              tmp939.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp939, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is GetResultSetMetadata_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GetResultSetMetadata_result(");
        int tmp941 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp941++) { sb.Append(", "); }
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class FetchResults_args : TBase
    {
      private TFetchResultsReq _req;

      public TFetchResultsReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.@req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @req;
      }

      public FetchResults_args()
      {
      }

      public FetchResults_args DeepCopy()
      {
        var tmp942 = new FetchResults_args();
        if((Req != null) && __isset.@req)
        {
          tmp942.Req = (TFetchResultsReq)this.Req.DeepCopy();
        }
        tmp942.__isset.@req = this.__isset.@req;
        return tmp942;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TFetchResultsReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp943 = new TStruct("FetchResults_args");
          await oprot.WriteStructBeginAsync(tmp943, cancellationToken);
          var tmp944 = new TField();
          if((Req != null) && __isset.@req)
          {
            tmp944.Name = "req";
            tmp944.Type = TType.Struct;
            tmp944.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp944, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is FetchResults_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.@req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("FetchResults_args(");
        int tmp946 = 0;
        if((Req != null) && __isset.@req)
        {
          if(0 < tmp946++) { sb.Append(", "); }
          sb.Append("Req: ");
          sb.Append(Req);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class FetchResults_result : TBase
    {
      private TFetchResultsResp _success;

      public TFetchResultsResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
      }

      public FetchResults_result()
      {
      }

      public FetchResults_result DeepCopy()
      {
        var tmp947 = new FetchResults_result();
        if((Success != null) && __isset.@success)
        {
          tmp947.Success = (TFetchResultsResp)this.Success.DeepCopy();
        }
        tmp947.__isset.@success = this.__isset.@success;
        return tmp947;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TFetchResultsResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp948 = new TStruct("FetchResults_result");
          await oprot.WriteStructBeginAsync(tmp948, cancellationToken);
          var tmp949 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp949.Name = "Success";
              tmp949.Type = TType.Struct;
              tmp949.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp949, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is FetchResults_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("FetchResults_result(");
        int tmp951 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp951++) { sb.Append(", "); }
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class GetDelegationToken_args : TBase
    {
      private TGetDelegationTokenReq _req;

      public TGetDelegationTokenReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.@req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @req;
      }

      public GetDelegationToken_args()
      {
      }

      public GetDelegationToken_args DeepCopy()
      {
        var tmp952 = new GetDelegationToken_args();
        if((Req != null) && __isset.@req)
        {
          tmp952.Req = (TGetDelegationTokenReq)this.Req.DeepCopy();
        }
        tmp952.__isset.@req = this.__isset.@req;
        return tmp952;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TGetDelegationTokenReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp953 = new TStruct("GetDelegationToken_args");
          await oprot.WriteStructBeginAsync(tmp953, cancellationToken);
          var tmp954 = new TField();
          if((Req != null) && __isset.@req)
          {
            tmp954.Name = "req";
            tmp954.Type = TType.Struct;
            tmp954.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp954, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is GetDelegationToken_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.@req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GetDelegationToken_args(");
        int tmp956 = 0;
        if((Req != null) && __isset.@req)
        {
          if(0 < tmp956++) { sb.Append(", "); }
          sb.Append("Req: ");
          sb.Append(Req);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class GetDelegationToken_result : TBase
    {
      private TGetDelegationTokenResp _success;

      public TGetDelegationTokenResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
      }

      public GetDelegationToken_result()
      {
      }

      public GetDelegationToken_result DeepCopy()
      {
        var tmp957 = new GetDelegationToken_result();
        if((Success != null) && __isset.@success)
        {
          tmp957.Success = (TGetDelegationTokenResp)this.Success.DeepCopy();
        }
        tmp957.__isset.@success = this.__isset.@success;
        return tmp957;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TGetDelegationTokenResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp958 = new TStruct("GetDelegationToken_result");
          await oprot.WriteStructBeginAsync(tmp958, cancellationToken);
          var tmp959 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp959.Name = "Success";
              tmp959.Type = TType.Struct;
              tmp959.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp959, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is GetDelegationToken_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GetDelegationToken_result(");
        int tmp961 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp961++) { sb.Append(", "); }
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class CancelDelegationToken_args : TBase
    {
      private TCancelDelegationTokenReq _req;

      public TCancelDelegationTokenReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.@req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @req;
      }

      public CancelDelegationToken_args()
      {
      }

      public CancelDelegationToken_args DeepCopy()
      {
        var tmp962 = new CancelDelegationToken_args();
        if((Req != null) && __isset.@req)
        {
          tmp962.Req = (TCancelDelegationTokenReq)this.Req.DeepCopy();
        }
        tmp962.__isset.@req = this.__isset.@req;
        return tmp962;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TCancelDelegationTokenReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp963 = new TStruct("CancelDelegationToken_args");
          await oprot.WriteStructBeginAsync(tmp963, cancellationToken);
          var tmp964 = new TField();
          if((Req != null) && __isset.@req)
          {
            tmp964.Name = "req";
            tmp964.Type = TType.Struct;
            tmp964.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp964, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is CancelDelegationToken_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.@req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("CancelDelegationToken_args(");
        int tmp966 = 0;
        if((Req != null) && __isset.@req)
        {
          if(0 < tmp966++) { sb.Append(", "); }
          sb.Append("Req: ");
          sb.Append(Req);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class CancelDelegationToken_result : TBase
    {
      private TCancelDelegationTokenResp _success;

      public TCancelDelegationTokenResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
      }

      public CancelDelegationToken_result()
      {
      }

      public CancelDelegationToken_result DeepCopy()
      {
        var tmp967 = new CancelDelegationToken_result();
        if((Success != null) && __isset.@success)
        {
          tmp967.Success = (TCancelDelegationTokenResp)this.Success.DeepCopy();
        }
        tmp967.__isset.@success = this.__isset.@success;
        return tmp967;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TCancelDelegationTokenResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp968 = new TStruct("CancelDelegationToken_result");
          await oprot.WriteStructBeginAsync(tmp968, cancellationToken);
          var tmp969 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp969.Name = "Success";
              tmp969.Type = TType.Struct;
              tmp969.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp969, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is CancelDelegationToken_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("CancelDelegationToken_result(");
        int tmp971 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp971++) { sb.Append(", "); }
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class RenewDelegationToken_args : TBase
    {
      private TRenewDelegationTokenReq _req;

      public TRenewDelegationTokenReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.@req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @req;
      }

      public RenewDelegationToken_args()
      {
      }

      public RenewDelegationToken_args DeepCopy()
      {
        var tmp972 = new RenewDelegationToken_args();
        if((Req != null) && __isset.@req)
        {
          tmp972.Req = (TRenewDelegationTokenReq)this.Req.DeepCopy();
        }
        tmp972.__isset.@req = this.__isset.@req;
        return tmp972;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TRenewDelegationTokenReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp973 = new TStruct("RenewDelegationToken_args");
          await oprot.WriteStructBeginAsync(tmp973, cancellationToken);
          var tmp974 = new TField();
          if((Req != null) && __isset.@req)
          {
            tmp974.Name = "req";
            tmp974.Type = TType.Struct;
            tmp974.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp974, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is RenewDelegationToken_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.@req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("RenewDelegationToken_args(");
        int tmp976 = 0;
        if((Req != null) && __isset.@req)
        {
          if(0 < tmp976++) { sb.Append(", "); }
          sb.Append("Req: ");
          sb.Append(Req);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class RenewDelegationToken_result : TBase
    {
      private TRenewDelegationTokenResp _success;

      public TRenewDelegationTokenResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
      }

      public RenewDelegationToken_result()
      {
      }

      public RenewDelegationToken_result DeepCopy()
      {
        var tmp977 = new RenewDelegationToken_result();
        if((Success != null) && __isset.@success)
        {
          tmp977.Success = (TRenewDelegationTokenResp)this.Success.DeepCopy();
        }
        tmp977.__isset.@success = this.__isset.@success;
        return tmp977;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TRenewDelegationTokenResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp978 = new TStruct("RenewDelegationToken_result");
          await oprot.WriteStructBeginAsync(tmp978, cancellationToken);
          var tmp979 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp979.Name = "Success";
              tmp979.Type = TType.Struct;
              tmp979.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp979, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is RenewDelegationToken_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("RenewDelegationToken_result(");
        int tmp981 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp981++) { sb.Append(", "); }
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class GetQueryId_args : TBase
    {
      private TGetQueryIdReq _req;

      public TGetQueryIdReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.@req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @req;
      }

      public GetQueryId_args()
      {
      }

      public GetQueryId_args DeepCopy()
      {
        var tmp982 = new GetQueryId_args();
        if((Req != null) && __isset.@req)
        {
          tmp982.Req = (TGetQueryIdReq)this.Req.DeepCopy();
        }
        tmp982.__isset.@req = this.__isset.@req;
        return tmp982;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TGetQueryIdReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp983 = new TStruct("GetQueryId_args");
          await oprot.WriteStructBeginAsync(tmp983, cancellationToken);
          var tmp984 = new TField();
          if((Req != null) && __isset.@req)
          {
            tmp984.Name = "req";
            tmp984.Type = TType.Struct;
            tmp984.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp984, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is GetQueryId_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.@req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp985 = new StringBuilder("GetQueryId_args(");
        int tmp986 = 0;
        if((Req != null) && __isset.@req)
        {
          if(0 < tmp986++) { tmp985.Append(", "); }
          tmp985.Append("Req: ");
          Req.ToString(tmp985);
        }
        tmp985.Append(')');
        return tmp985.ToString();
      }
    }


    public partial class GetQueryId_result : TBase
    {
      private TGetQueryIdResp _success;

      public TGetQueryIdResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
      }

      public GetQueryId_result()
      {
      }

      public GetQueryId_result DeepCopy()
      {
        var tmp987 = new GetQueryId_result();
        if((Success != null) && __isset.@success)
        {
          tmp987.Success = (TGetQueryIdResp)this.Success.DeepCopy();
        }
        tmp987.__isset.@success = this.__isset.@success;
        return tmp987;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TGetQueryIdResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp988 = new TStruct("GetQueryId_result");
          await oprot.WriteStructBeginAsync(tmp988, cancellationToken);
          var tmp989 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp989.Name = "Success";
              tmp989.Type = TType.Struct;
              tmp989.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp989, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is GetQueryId_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("GetQueryId_result(");
        int tmp991 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp991++) { sb.Append(", "); }
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class SetClientInfo_args : TBase
    {
      private TSetClientInfoReq _req;

      public TSetClientInfoReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.@req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @req;
      }

      public SetClientInfo_args()
      {
      }

      public SetClientInfo_args DeepCopy()
      {
        var tmp992 = new SetClientInfo_args();
        if((Req != null) && __isset.@req)
        {
          tmp992.Req = (TSetClientInfoReq)this.Req.DeepCopy();
        }
        tmp992.__isset.@req = this.__isset.@req;
        return tmp992;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TSetClientInfoReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp993 = new TStruct("SetClientInfo_args");
          await oprot.WriteStructBeginAsync(tmp993, cancellationToken);
          var tmp994 = new TField();
          if((Req != null) && __isset.@req)
          {
            tmp994.Name = "req";
            tmp994.Type = TType.Struct;
            tmp994.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp994, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is SetClientInfo_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.@req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("SetClientInfo_args(");
        int tmp996 = 0;
        if((Req != null) && __isset.@req)
        {
          if(0 < tmp996++) { sb.Append(", "); }
          sb.Append("Req: ");
          sb.Append(Req);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class SetClientInfo_result : TBase
    {
      private TSetClientInfoResp _success;

      public TSetClientInfoResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
      }

      public SetClientInfo_result()
      {
      }

      public SetClientInfo_result DeepCopy()
      {
        var tmp997 = new SetClientInfo_result();
        if((Success != null) && __isset.@success)
        {
          tmp997.Success = (TSetClientInfoResp)this.Success.DeepCopy();
        }
        tmp997.__isset.@success = this.__isset.@success;
        return tmp997;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSetClientInfoResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp998 = new TStruct("SetClientInfo_result");
          await oprot.WriteStructBeginAsync(tmp998, cancellationToken);
          var tmp999 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp999.Name = "Success";
              tmp999.Type = TType.Struct;
              tmp999.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp999, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is SetClientInfo_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1000 = new StringBuilder("SetClientInfo_result(");
        int tmp1001 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp1001++) { tmp1000.Append(", "); }
          tmp1000.Append("Success: ");
          Success.ToString(tmp1000);
        }
        tmp1000.Append(')');
        return tmp1000.ToString();
      }
    }


    public partial class UploadData_args : TBase
    {
      private TUploadDataReq _req;

      public TUploadDataReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.@req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @req;
      }

      public UploadData_args()
      {
      }

      public UploadData_args DeepCopy()
      {
        var tmp1002 = new UploadData_args();
        if((Req != null) && __isset.@req)
        {
          tmp1002.Req = (TUploadDataReq)this.Req.DeepCopy();
        }
        tmp1002.__isset.@req = this.__isset.@req;
        return tmp1002;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TUploadDataReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1003 = new TStruct("UploadData_args");
          await oprot.WriteStructBeginAsync(tmp1003, cancellationToken);
          var tmp1004 = new TField();
          if((Req != null) && __isset.@req)
          {
            tmp1004.Name = "req";
            tmp1004.Type = TType.Struct;
            tmp1004.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1004, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is UploadData_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.@req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("UploadData_args(");
        int tmp1006 = 0;
        if((Req != null) && __isset.@req)
        {
          if(0 < tmp1006++) { sb.Append(", "); }
          sb.Append("Req: ");
          sb.Append(Req);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class UploadData_result : TBase
    {
      private TUploadDataResp _success;

      public TUploadDataResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
      }

      public UploadData_result()
      {
      }

      public UploadData_result DeepCopy()
      {
        var tmp1007 = new UploadData_result();
        if((Success != null) && __isset.@success)
        {
          tmp1007.Success = (TUploadDataResp)this.Success.DeepCopy();
        }
        tmp1007.__isset.@success = this.__isset.@success;
        return tmp1007;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TUploadDataResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1008 = new TStruct("UploadData_result");
          await oprot.WriteStructBeginAsync(tmp1008, cancellationToken);
          var tmp1009 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp1009.Name = "Success";
              tmp1009.Type = TType.Struct;
              tmp1009.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1009, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is UploadData_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("UploadData_result(");
        int tmp1011 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp1011++) { sb.Append(", "); }
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class DownloadData_args : TBase
    {
      private TDownloadDataReq _req;

      public TDownloadDataReq Req
      {
        get
        {
          return _req;
        }
        set
        {
          __isset.@req = true;
          this._req = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @req;
      }

      public DownloadData_args()
      {
      }

      public DownloadData_args DeepCopy()
      {
        var tmp1012 = new DownloadData_args();
        if((Req != null) && __isset.@req)
        {
          tmp1012.Req = (TDownloadDataReq)this.Req.DeepCopy();
        }
        tmp1012.__isset.@req = this.__isset.@req;
        return tmp1012;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Req = new TDownloadDataReq();
                  await Req.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1013 = new TStruct("DownloadData_args");
          await oprot.WriteStructBeginAsync(tmp1013, cancellationToken);
          var tmp1014 = new TField();
          if((Req != null) && __isset.@req)
          {
            tmp1014.Name = "req";
            tmp1014.Type = TType.Struct;
            tmp1014.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1014, cancellationToken);
            await Req.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is DownloadData_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Req != null) && __isset.@req)
          {
            hashcode = (hashcode * 397) + Req.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("DownloadData_args(");
        int tmp1016 = 0;
        if((Req != null) && __isset.@req)
        {
          if(0 < tmp1016++) { sb.Append(", "); }
          sb.Append("Req: ");
          sb.Append(Req);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }


    public partial class DownloadData_result : TBase
    {
      private TDownloadDataResp _success;

      public TDownloadDataResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
      }

      public DownloadData_result()
      {
      }

      public DownloadData_result DeepCopy()
      {
        var tmp1017 = new DownloadData_result();
        if((Success != null) && __isset.@success)
        {
          tmp1017.Success = (TDownloadDataResp)this.Success.DeepCopy();
        }
        tmp1017.__isset.@success = this.__isset.@success;
        return tmp1017;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TDownloadDataResp();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1018 = new TStruct("DownloadData_result");
          await oprot.WriteStructBeginAsync(tmp1018, cancellationToken);
          var tmp1019 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp1019.Name = "Success";
              tmp1019.Type = TType.Struct;
              tmp1019.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1019, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is DownloadData_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("DownloadData_result(");
        int tmp1021 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp1021++) { sb.Append(", "); }
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(')');
        return sb.ToString();
      }
    }

  }

}
