/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class TI32Column : TBase
{

  public List<int> Values { get; set; }

  public byte[] Nulls { get; set; }

  public TI32Column()
  {
  }

  public TI32Column(List<int> @values, byte[] @nulls) : this()
  {
    this.Values = @values;
    this.Nulls = @nulls;
  }

  public TI32Column DeepCopy()
  {
    var tmp159 = new TI32Column();
    if((Values != null))
    {
      tmp159.Values = this.Values.DeepCopy();
    }
    if((Nulls != null))
    {
      tmp159.Nulls = this.Nulls.ToArray();
    }
    return tmp159;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_values = false;
      bool isset_nulls = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List)
            {
              {
                var _list160 = await iprot.ReadListBeginAsync(cancellationToken);
                Values = new List<int>(_list160.Count);
                for(int _i161 = 0; _i161 < _list160.Count; ++_i161)
                {
                  int _elem162;
                  _elem162 = await iprot.ReadI32Async(cancellationToken);
                  Values.Add(_elem162);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_values = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              Nulls = await iprot.ReadBinaryAsync(cancellationToken);
              isset_nulls = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_values)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_nulls)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp163 = new TStruct("TI32Column");
      await oprot.WriteStructBeginAsync(tmp163, cancellationToken);
      var tmp164 = new TField();
      if((Values != null))
      {
        tmp164.Name = "values";
        tmp164.Type = TType.List;
        tmp164.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp164, cancellationToken);
        await oprot.WriteListBeginAsync(new TList(TType.I32, Values.Count), cancellationToken);
        foreach (int _iter165 in Values)
        {
          await oprot.WriteI32Async(_iter165, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Nulls != null))
      {
        tmp164.Name = "nulls";
        tmp164.Type = TType.String;
        tmp164.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp164, cancellationToken);
        await oprot.WriteBinaryAsync(Nulls, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TI32Column other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return TCollections.Equals(Values, other.Values)
      && TCollections.Equals(Nulls, other.Nulls);
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((Values != null))
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Values);
      }
      if((Nulls != null))
      {
        hashcode = (hashcode * 397) + Nulls.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("TI32Column(");
    if((Values != null))
    {
      sb.Append(", Values: ");
      sb.Append(Values);
    }
    if((Nulls != null))
    {
      sb.Append(", Nulls: ");
      sb.Append(Nulls);
    }
    sb.Append(')');
    return sb.ToString();
  }
}

