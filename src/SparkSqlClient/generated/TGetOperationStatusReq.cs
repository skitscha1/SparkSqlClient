/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class TGetOperationStatusReq : TBase
{
  private bool _getProgressUpdate;

  public TOperationHandle OperationHandle { get; set; }

  public bool GetProgressUpdate
  {
    get
    {
      return _getProgressUpdate;
    }
    set
    {
      __isset.getProgressUpdate = true;
      this._getProgressUpdate = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool getProgressUpdate;
  }

  public TGetOperationStatusReq()
  {
  }

  public TGetOperationStatusReq(TOperationHandle operationHandle) : this()
  {
    this.OperationHandle = operationHandle;
  }

  public TGetOperationStatusReq DeepCopy()
  {
    var tmp440 = new TGetOperationStatusReq();
    if((OperationHandle != null))
    {
      tmp440.OperationHandle = (TOperationHandle)this.OperationHandle.DeepCopy();
    }
    if(__isset.getProgressUpdate)
    {
      tmp440.GetProgressUpdate = this.GetProgressUpdate;
    }
    tmp440.__isset.getProgressUpdate = this.__isset.getProgressUpdate;
    return tmp440;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_operationHandle = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct)
            {
              OperationHandle = new TOperationHandle();
              await OperationHandle.ReadAsync(iprot, cancellationToken);
              isset_operationHandle = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.Bool)
            {
              GetProgressUpdate = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_operationHandle)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp441 = new TStruct("TGetOperationStatusReq");
      await oprot.WriteStructBeginAsync(tmp441, cancellationToken);
      var tmp442 = new TField();
      if((OperationHandle != null))
      {
        tmp442.Name = "operationHandle";
        tmp442.Type = TType.Struct;
        tmp442.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp442, cancellationToken);
        await OperationHandle.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.getProgressUpdate)
      {
        tmp442.Name = "getProgressUpdate";
        tmp442.Type = TType.Bool;
        tmp442.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp442, cancellationToken);
        await oprot.WriteBoolAsync(GetProgressUpdate, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TGetOperationStatusReq other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return global::System.Object.Equals(OperationHandle, other.OperationHandle)
      && ((__isset.getProgressUpdate == other.__isset.getProgressUpdate) && ((!__isset.getProgressUpdate) || (global::System.Object.Equals(GetProgressUpdate, other.GetProgressUpdate))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((OperationHandle != null))
      {
        hashcode = (hashcode * 397) + OperationHandle.GetHashCode();
      }
      if(__isset.getProgressUpdate)
      {
        hashcode = (hashcode * 397) + GetProgressUpdate.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("TGetOperationStatusReq(");
    if((OperationHandle != null))
    {
      sb.Append(", OperationHandle: ");
      sb.Append(OperationHandle);
    }
    if(__isset.getProgressUpdate)
    {
      sb.Append(", GetProgressUpdate: ");
      sb.Append(GetProgressUpdate);
    }
    sb.Append(')');
    return sb.ToString();
  }
}

