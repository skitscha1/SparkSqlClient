/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class TRowSet : TBase
{
  private List<TColumn> _columns;
  private byte[] _binaryColumns;
  private int _columnCount;

  public long StartRowOffset { get; set; }

  public List<TRow> Rows { get; set; }

  public List<TColumn> Columns
  {
    get
    {
      return _columns;
    }
    set
    {
      __isset.@columns = true;
      this._columns = value;
    }
  }

  public byte[] BinaryColumns
  {
    get
    {
      return _binaryColumns;
    }
    set
    {
      __isset.binaryColumns = true;
      this._binaryColumns = value;
    }
  }

  public int ColumnCount
  {
    get
    {
      return _columnCount;
    }
    set
    {
      __isset.columnCount = true;
      this._columnCount = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool @columns;
    public bool binaryColumns;
    public bool columnCount;
  }

  public TRowSet()
  {
  }

  public TRowSet(long startRowOffset, List<TRow> @rows) : this()
  {
    this.StartRowOffset = startRowOffset;
    this.Rows = @rows;
  }

  public TRowSet DeepCopy()
  {
    var tmp209 = new TRowSet();
    tmp209.StartRowOffset = this.StartRowOffset;
    if((Rows != null))
    {
      tmp209.Rows = this.Rows.DeepCopy();
    }
    if((Columns != null) && __isset.@columns)
    {
      tmp209.Columns = this.Columns.DeepCopy();
    }
    tmp209.__isset.@columns = this.__isset.@columns;
    if((BinaryColumns != null) && __isset.binaryColumns)
    {
      tmp209.BinaryColumns = this.BinaryColumns.ToArray();
    }
    tmp209.__isset.binaryColumns = this.__isset.binaryColumns;
    if(__isset.columnCount)
    {
      tmp209.ColumnCount = this.ColumnCount;
    }
    tmp209.__isset.columnCount = this.__isset.columnCount;
    return tmp209;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_startRowOffset = false;
      bool isset_rows = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64)
            {
              StartRowOffset = await iprot.ReadI64Async(cancellationToken);
              isset_startRowOffset = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.List)
            {
              {
                var _list210 = await iprot.ReadListBeginAsync(cancellationToken);
                Rows = new List<TRow>(_list210.Count);
                for(int _i211 = 0; _i211 < _list210.Count; ++_i211)
                {
                  TRow _elem212;
                  _elem212 = new TRow();
                  await _elem212.ReadAsync(iprot, cancellationToken);
                  Rows.Add(_elem212);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_rows = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.List)
            {
              {
                var _list213 = await iprot.ReadListBeginAsync(cancellationToken);
                Columns = new List<TColumn>(_list213.Count);
                for(int _i214 = 0; _i214 < _list213.Count; ++_i214)
                {
                  TColumn _elem215;
                  _elem215 = new TColumn();
                  await _elem215.ReadAsync(iprot, cancellationToken);
                  Columns.Add(_elem215);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              BinaryColumns = await iprot.ReadBinaryAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.I32)
            {
              ColumnCount = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_startRowOffset)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_rows)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp216 = new TStruct("TRowSet");
      await oprot.WriteStructBeginAsync(tmp216, cancellationToken);
      var tmp217 = new TField();
      tmp217.Name = "startRowOffset";
      tmp217.Type = TType.I64;
      tmp217.ID = 1;
      await oprot.WriteFieldBeginAsync(tmp217, cancellationToken);
      await oprot.WriteI64Async(StartRowOffset, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      if((Rows != null))
      {
        tmp217.Name = "rows";
        tmp217.Type = TType.List;
        tmp217.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp217, cancellationToken);
        await oprot.WriteListBeginAsync(new TList(TType.Struct, Rows.Count), cancellationToken);
        foreach (TRow _iter218 in Rows)
        {
          await _iter218.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Columns != null) && __isset.@columns)
      {
        tmp217.Name = "columns";
        tmp217.Type = TType.List;
        tmp217.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp217, cancellationToken);
        await oprot.WriteListBeginAsync(new TList(TType.Struct, Columns.Count), cancellationToken);
        foreach (TColumn _iter219 in Columns)
        {
          await _iter219.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((BinaryColumns != null) && __isset.binaryColumns)
      {
        tmp217.Name = "binaryColumns";
        tmp217.Type = TType.String;
        tmp217.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp217, cancellationToken);
        await oprot.WriteBinaryAsync(BinaryColumns, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.columnCount)
      {
        tmp217.Name = "columnCount";
        tmp217.Type = TType.I32;
        tmp217.ID = 5;
        await oprot.WriteFieldBeginAsync(tmp217, cancellationToken);
        await oprot.WriteI32Async(ColumnCount, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TRowSet other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return global::System.Object.Equals(StartRowOffset, other.StartRowOffset)
      && TCollections.Equals(Rows, other.Rows)
      && ((__isset.@columns == other.__isset.@columns) && ((!__isset.@columns) || (TCollections.Equals(Columns, other.Columns))))
      && ((__isset.binaryColumns == other.__isset.binaryColumns) && ((!__isset.binaryColumns) || (TCollections.Equals(BinaryColumns, other.BinaryColumns))))
      && ((__isset.columnCount == other.__isset.columnCount) && ((!__isset.columnCount) || (global::System.Object.Equals(ColumnCount, other.ColumnCount))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      hashcode = (hashcode * 397) + StartRowOffset.GetHashCode();
      if((Rows != null))
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Rows);
      }
      if((Columns != null) && __isset.@columns)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Columns);
      }
      if((BinaryColumns != null) && __isset.binaryColumns)
      {
        hashcode = (hashcode * 397) + BinaryColumns.GetHashCode();
      }
      if(__isset.columnCount)
      {
        hashcode = (hashcode * 397) + ColumnCount.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("TRowSet(");
    sb.Append(", StartRowOffset: ");
    sb.Append(StartRowOffset);
    if((Rows != null))
    {
      sb.Append(", Rows: ");
      sb.Append(Rows);
    }
    if((Columns != null) && __isset.@columns)
    {
      sb.Append(", Columns: ");
      sb.Append(Columns);
    }
    if((BinaryColumns != null) && __isset.binaryColumns)
    {
      sb.Append(", BinaryColumns: ");
      sb.Append(BinaryColumns);
    }
    if(__isset.columnCount)
    {
      sb.Append(", ColumnCount: ");
      sb.Append(ColumnCount);
    }
    sb.Append(')');
    return sb.ToString();
  }
}

