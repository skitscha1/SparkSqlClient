/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class TColumnValue : TBase
{
  private TBoolValue _boolVal;
  private TByteValue _byteVal;
  private TI16Value _i16Val;
  private TI32Value _i32Val;
  private TI64Value _i64Val;
  private TDoubleValue _doubleVal;
  private TStringValue _stringVal;

  public TBoolValue BoolVal
  {
    get
    {
      return _boolVal;
    }
    set
    {
      __isset.boolVal = true;
      this._boolVal = value;
    }
  }

  public TByteValue ByteVal
  {
    get
    {
      return _byteVal;
    }
    set
    {
      __isset.byteVal = true;
      this._byteVal = value;
    }
  }

  public TI16Value I16Val
  {
    get
    {
      return _i16Val;
    }
    set
    {
      __isset.i16Val = true;
      this._i16Val = value;
    }
  }

  public TI32Value I32Val
  {
    get
    {
      return _i32Val;
    }
    set
    {
      __isset.i32Val = true;
      this._i32Val = value;
    }
  }

  public TI64Value I64Val
  {
    get
    {
      return _i64Val;
    }
    set
    {
      __isset.i64Val = true;
      this._i64Val = value;
    }
  }

  public TDoubleValue DoubleVal
  {
    get
    {
      return _doubleVal;
    }
    set
    {
      __isset.doubleVal = true;
      this._doubleVal = value;
    }
  }

  public TStringValue StringVal
  {
    get
    {
      return _stringVal;
    }
    set
    {
      __isset.stringVal = true;
      this._stringVal = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool boolVal;
    public bool byteVal;
    public bool i16Val;
    public bool i32Val;
    public bool i64Val;
    public bool doubleVal;
    public bool stringVal;
  }

  public TColumnValue()
  {
  }

  public TColumnValue DeepCopy()
  {
    var tmp118 = new TColumnValue();
    if((BoolVal != null) && __isset.boolVal)
    {
      tmp118.BoolVal = (TBoolValue)this.BoolVal.DeepCopy();
    }
    tmp118.__isset.boolVal = this.__isset.boolVal;
    if((ByteVal != null) && __isset.byteVal)
    {
      tmp118.ByteVal = (TByteValue)this.ByteVal.DeepCopy();
    }
    tmp118.__isset.byteVal = this.__isset.byteVal;
    if((I16Val != null) && __isset.i16Val)
    {
      tmp118.I16Val = (TI16Value)this.I16Val.DeepCopy();
    }
    tmp118.__isset.i16Val = this.__isset.i16Val;
    if((I32Val != null) && __isset.i32Val)
    {
      tmp118.I32Val = (TI32Value)this.I32Val.DeepCopy();
    }
    tmp118.__isset.i32Val = this.__isset.i32Val;
    if((I64Val != null) && __isset.i64Val)
    {
      tmp118.I64Val = (TI64Value)this.I64Val.DeepCopy();
    }
    tmp118.__isset.i64Val = this.__isset.i64Val;
    if((DoubleVal != null) && __isset.doubleVal)
    {
      tmp118.DoubleVal = (TDoubleValue)this.DoubleVal.DeepCopy();
    }
    tmp118.__isset.doubleVal = this.__isset.doubleVal;
    if((StringVal != null) && __isset.stringVal)
    {
      tmp118.StringVal = (TStringValue)this.StringVal.DeepCopy();
    }
    tmp118.__isset.stringVal = this.__isset.stringVal;
    return tmp118;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct)
            {
              BoolVal = new TBoolValue();
              await BoolVal.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.Struct)
            {
              ByteVal = new TByteValue();
              await ByteVal.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.Struct)
            {
              I16Val = new TI16Value();
              await I16Val.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.Struct)
            {
              I32Val = new TI32Value();
              await I32Val.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.Struct)
            {
              I64Val = new TI64Value();
              await I64Val.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.Struct)
            {
              DoubleVal = new TDoubleValue();
              await DoubleVal.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.Struct)
            {
              StringVal = new TStringValue();
              await StringVal.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp119 = new TStruct("TColumnValue");
      await oprot.WriteStructBeginAsync(tmp119, cancellationToken);
      var tmp120 = new TField();
      if((BoolVal != null) && __isset.boolVal)
      {
        tmp120.Name = "boolVal";
        tmp120.Type = TType.Struct;
        tmp120.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp120, cancellationToken);
        await BoolVal.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ByteVal != null) && __isset.byteVal)
      {
        tmp120.Name = "byteVal";
        tmp120.Type = TType.Struct;
        tmp120.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp120, cancellationToken);
        await ByteVal.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((I16Val != null) && __isset.i16Val)
      {
        tmp120.Name = "i16Val";
        tmp120.Type = TType.Struct;
        tmp120.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp120, cancellationToken);
        await I16Val.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((I32Val != null) && __isset.i32Val)
      {
        tmp120.Name = "i32Val";
        tmp120.Type = TType.Struct;
        tmp120.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp120, cancellationToken);
        await I32Val.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((I64Val != null) && __isset.i64Val)
      {
        tmp120.Name = "i64Val";
        tmp120.Type = TType.Struct;
        tmp120.ID = 5;
        await oprot.WriteFieldBeginAsync(tmp120, cancellationToken);
        await I64Val.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((DoubleVal != null) && __isset.doubleVal)
      {
        tmp120.Name = "doubleVal";
        tmp120.Type = TType.Struct;
        tmp120.ID = 6;
        await oprot.WriteFieldBeginAsync(tmp120, cancellationToken);
        await DoubleVal.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((StringVal != null) && __isset.stringVal)
      {
        tmp120.Name = "stringVal";
        tmp120.Type = TType.Struct;
        tmp120.ID = 7;
        await oprot.WriteFieldBeginAsync(tmp120, cancellationToken);
        await StringVal.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TColumnValue other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.boolVal == other.__isset.boolVal) && ((!__isset.boolVal) || (global::System.Object.Equals(BoolVal, other.BoolVal))))
      && ((__isset.byteVal == other.__isset.byteVal) && ((!__isset.byteVal) || (global::System.Object.Equals(ByteVal, other.ByteVal))))
      && ((__isset.i16Val == other.__isset.i16Val) && ((!__isset.i16Val) || (global::System.Object.Equals(I16Val, other.I16Val))))
      && ((__isset.i32Val == other.__isset.i32Val) && ((!__isset.i32Val) || (global::System.Object.Equals(I32Val, other.I32Val))))
      && ((__isset.i64Val == other.__isset.i64Val) && ((!__isset.i64Val) || (global::System.Object.Equals(I64Val, other.I64Val))))
      && ((__isset.doubleVal == other.__isset.doubleVal) && ((!__isset.doubleVal) || (global::System.Object.Equals(DoubleVal, other.DoubleVal))))
      && ((__isset.stringVal == other.__isset.stringVal) && ((!__isset.stringVal) || (global::System.Object.Equals(StringVal, other.StringVal))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((BoolVal != null) && __isset.boolVal)
      {
        hashcode = (hashcode * 397) + BoolVal.GetHashCode();
      }
      if((ByteVal != null) && __isset.byteVal)
      {
        hashcode = (hashcode * 397) + ByteVal.GetHashCode();
      }
      if((I16Val != null) && __isset.i16Val)
      {
        hashcode = (hashcode * 397) + I16Val.GetHashCode();
      }
      if((I32Val != null) && __isset.i32Val)
      {
        hashcode = (hashcode * 397) + I32Val.GetHashCode();
      }
      if((I64Val != null) && __isset.i64Val)
      {
        hashcode = (hashcode * 397) + I64Val.GetHashCode();
      }
      if((DoubleVal != null) && __isset.doubleVal)
      {
        hashcode = (hashcode * 397) + DoubleVal.GetHashCode();
      }
      if((StringVal != null) && __isset.stringVal)
      {
        hashcode = (hashcode * 397) + StringVal.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("TColumnValue(");
    int tmp122 = 0;
    if((BoolVal != null) && __isset.boolVal)
    {
      if(0 < tmp122++) { sb.Append(", "); }
      sb.Append("BoolVal: ");
      sb.Append(BoolVal);
    }
    if((ByteVal != null) && __isset.byteVal)
    {
      if(0 < tmp122++) { sb.Append(", "); }
      sb.Append("ByteVal: ");
      sb.Append(ByteVal);
    }
    if((I16Val != null) && __isset.i16Val)
    {
      if(0 < tmp122++) { sb.Append(", "); }
      sb.Append("I16Val: ");
      sb.Append(I16Val);
    }
    if((I32Val != null) && __isset.i32Val)
    {
      if(0 < tmp122++) { sb.Append(", "); }
      sb.Append("I32Val: ");
      sb.Append(I32Val);
    }
    if((I64Val != null) && __isset.i64Val)
    {
      if(0 < tmp122++) { sb.Append(", "); }
      sb.Append("I64Val: ");
      sb.Append(I64Val);
    }
    if((DoubleVal != null) && __isset.doubleVal)
    {
      if(0 < tmp122++) { sb.Append(", "); }
      sb.Append("DoubleVal: ");
      sb.Append(DoubleVal);
    }
    if((StringVal != null) && __isset.stringVal)
    {
      if(0 < tmp122++) { sb.Append(", "); }
      sb.Append("StringVal: ");
      sb.Append(StringVal);
    }
    sb.Append(')');
    return sb.ToString();
  }
}

