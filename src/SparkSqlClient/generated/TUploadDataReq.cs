/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class TUploadDataReq : TBase
{
  private string _tableName;
  private string _path;

  public TSessionHandle SessionHandle { get; set; }

  public string TableName
  {
    get
    {
      return _tableName;
    }
    set
    {
      __isset.tableName = true;
      this._tableName = value;
    }
  }

  public string Path
  {
    get
    {
      return _path;
    }
    set
    {
      __isset.@path = true;
      this._path = value;
    }
  }

  public byte[] Values { get; set; }


  public Isset __isset;
  public struct Isset
  {
    public bool tableName;
    public bool @path;
  }

  public TUploadDataReq()
  {
  }

  public TUploadDataReq(TSessionHandle sessionHandle, byte[] @values) : this()
  {
    this.SessionHandle = sessionHandle;
    this.Values = @values;
  }

  public TUploadDataReq DeepCopy()
  {
    var tmp331 = new TUploadDataReq();
    if((SessionHandle != null))
    {
      tmp331.SessionHandle = (TSessionHandle)this.SessionHandle.DeepCopy();
    }
    if((TableName != null) && __isset.tableName)
    {
      tmp331.TableName = this.TableName;
    }
    tmp331.__isset.tableName = this.__isset.tableName;
    if((Path != null) && __isset.@path)
    {
      tmp331.Path = this.Path;
    }
    tmp331.__isset.@path = this.__isset.@path;
    if((Values != null))
    {
      tmp331.Values = this.Values.ToArray();
    }
    return tmp331;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_sessionHandle = false;
      bool isset_values = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct)
            {
              SessionHandle = new TSessionHandle();
              await SessionHandle.ReadAsync(iprot, cancellationToken);
              isset_sessionHandle = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              TableName = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              Path = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              Values = await iprot.ReadBinaryAsync(cancellationToken);
              isset_values = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_sessionHandle)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_values)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp332 = new TStruct("TUploadDataReq");
      await oprot.WriteStructBeginAsync(tmp332, cancellationToken);
      var tmp333 = new TField();
      if((SessionHandle != null))
      {
        tmp333.Name = "sessionHandle";
        tmp333.Type = TType.Struct;
        tmp333.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp333, cancellationToken);
        await SessionHandle.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((TableName != null) && __isset.tableName)
      {
        tmp333.Name = "tableName";
        tmp333.Type = TType.String;
        tmp333.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp333, cancellationToken);
        await oprot.WriteStringAsync(TableName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Path != null) && __isset.@path)
      {
        tmp333.Name = "path";
        tmp333.Type = TType.String;
        tmp333.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp333, cancellationToken);
        await oprot.WriteStringAsync(Path, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Values != null))
      {
        tmp333.Name = "values";
        tmp333.Type = TType.String;
        tmp333.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp333, cancellationToken);
        await oprot.WriteBinaryAsync(Values, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TUploadDataReq other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return global::System.Object.Equals(SessionHandle, other.SessionHandle)
      && ((__isset.tableName == other.__isset.tableName) && ((!__isset.tableName) || (global::System.Object.Equals(TableName, other.TableName))))
      && ((__isset.@path == other.__isset.@path) && ((!__isset.@path) || (global::System.Object.Equals(Path, other.Path))))
      && TCollections.Equals(Values, other.Values);
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((SessionHandle != null))
      {
        hashcode = (hashcode * 397) + SessionHandle.GetHashCode();
      }
      if((TableName != null) && __isset.tableName)
      {
        hashcode = (hashcode * 397) + TableName.GetHashCode();
      }
      if((Path != null) && __isset.@path)
      {
        hashcode = (hashcode * 397) + Path.GetHashCode();
      }
      if((Values != null))
      {
        hashcode = (hashcode * 397) + Values.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp334 = new StringBuilder("TUploadDataReq(");
    if((SessionHandle != null))
    {
      tmp334.Append(", SessionHandle: ");
      tmp334.Append(SessionHandle);
    }
    if((TableName != null) && __isset.tableName)
    {
      tmp334.Append(", TableName: ");
      tmp334.Append(TableName);
    }
    if((Path != null) && __isset.@path)
    {
      tmp334.Append(", Path: ");
      tmp334.Append(Path);
    }
    if((Values != null))
    {
      tmp334.Append(", Values: ");
      tmp334.Append(Values);
    }
    tmp334.Append(')');
    return tmp334.ToString();
  }
}

