/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class TOpenSessionReq : TBase
{
  private string _username;
  private string _password;
  private Dictionary<string, string> _configuration;

  /// <summary>
  /// 
  /// <seealso cref="global::.TProtocolVersion"/>
  /// </summary>
  public TProtocolVersion Client_protocol { get; set; }

  public string Username
  {
    get
    {
      return _username;
    }
    set
    {
      __isset.@username = true;
      this._username = value;
    }
  }

  public string Password
  {
    get
    {
      return _password;
    }
    set
    {
      __isset.@password = true;
      this._password = value;
    }
  }

  public Dictionary<string, string> Configuration
  {
    get
    {
      return _configuration;
    }
    set
    {
      __isset.@configuration = true;
      this._configuration = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool @username;
    public bool @password;
    public bool @configuration;
  }

  public TOpenSessionReq()
  {
    this.Client_protocol = TProtocolVersion.HIVE_CLI_SERVICE_PROTOCOL_V10;
  }

  public TOpenSessionReq(TProtocolVersion client_protocol) : this()
  {
    this.Client_protocol = client_protocol;
  }

  public TOpenSessionReq DeepCopy()
  {
    var tmp246 = new TOpenSessionReq();
    tmp246.Client_protocol = this.Client_protocol;
    if((Username != null) && __isset.@username)
    {
      tmp246.Username = this.Username;
    }
    tmp246.__isset.@username = this.__isset.@username;
    if((Password != null) && __isset.@password)
    {
      tmp246.Password = this.Password;
    }
    tmp246.__isset.@password = this.__isset.@password;
    if((Configuration != null) && __isset.@configuration)
    {
      tmp246.Configuration = this.Configuration.DeepCopy();
    }
    tmp246.__isset.@configuration = this.__isset.@configuration;
    return tmp246;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_client_protocol = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32)
            {
              Client_protocol = (TProtocolVersion)await iprot.ReadI32Async(cancellationToken);
              isset_client_protocol = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              Username = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              Password = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.Map)
            {
              {
                var _map247 = await iprot.ReadMapBeginAsync(cancellationToken);
                Configuration = new Dictionary<string, string>(_map247.Count);
                for(int _i248 = 0; _i248 < _map247.Count; ++_i248)
                {
                  string _key249;
                  string _val250;
                  _key249 = await iprot.ReadStringAsync(cancellationToken);
                  _val250 = await iprot.ReadStringAsync(cancellationToken);
                  Configuration[_key249] = _val250;
                }
                await iprot.ReadMapEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_client_protocol)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp251 = new TStruct("TOpenSessionReq");
      await oprot.WriteStructBeginAsync(tmp251, cancellationToken);
      var tmp252 = new TField();
      tmp252.Name = "client_protocol";
      tmp252.Type = TType.I32;
      tmp252.ID = 1;
      await oprot.WriteFieldBeginAsync(tmp252, cancellationToken);
      await oprot.WriteI32Async((int)Client_protocol, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      if((Username != null) && __isset.@username)
      {
        tmp252.Name = "username";
        tmp252.Type = TType.String;
        tmp252.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp252, cancellationToken);
        await oprot.WriteStringAsync(Username, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Password != null) && __isset.@password)
      {
        tmp252.Name = "password";
        tmp252.Type = TType.String;
        tmp252.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp252, cancellationToken);
        await oprot.WriteStringAsync(Password, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Configuration != null) && __isset.@configuration)
      {
        tmp252.Name = "configuration";
        tmp252.Type = TType.Map;
        tmp252.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp252, cancellationToken);
        await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Configuration.Count), cancellationToken);
        foreach (string _iter253 in Configuration.Keys)
        {
          await oprot.WriteStringAsync(_iter253, cancellationToken);
          await oprot.WriteStringAsync(Configuration[_iter253], cancellationToken);
        }
        await oprot.WriteMapEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TOpenSessionReq other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return global::System.Object.Equals(Client_protocol, other.Client_protocol)
      && ((__isset.@username == other.__isset.@username) && ((!__isset.@username) || (global::System.Object.Equals(Username, other.Username))))
      && ((__isset.@password == other.__isset.@password) && ((!__isset.@password) || (global::System.Object.Equals(Password, other.Password))))
      && ((__isset.@configuration == other.__isset.@configuration) && ((!__isset.@configuration) || (TCollections.Equals(Configuration, other.Configuration))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      hashcode = (hashcode * 397) + Client_protocol.GetHashCode();
      if((Username != null) && __isset.@username)
      {
        hashcode = (hashcode * 397) + Username.GetHashCode();
      }
      if((Password != null) && __isset.@password)
      {
        hashcode = (hashcode * 397) + Password.GetHashCode();
      }
      if((Configuration != null) && __isset.@configuration)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Configuration);
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("TOpenSessionReq(");
    sb.Append(", Client_protocol: ");
    sb.Append(Client_protocol);
    if((Username != null) && __isset.@username)
    {
      sb.Append(", Username: ");
      sb.Append(Username);
    }
    if((Password != null) && __isset.@password)
    {
      sb.Append(", Password: ");
      sb.Append(Password);
    }
    if((Configuration != null) && __isset.@configuration)
    {
      sb.Append(", Configuration: ");
      sb.Append(Configuration);
    }
    sb.Append(')');
    return sb.ToString();
  }
}

