/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class TOpenSessionResp : TBase
{
  private TSessionHandle _sessionHandle;
  private Dictionary<string, string> _configuration;

  public TStatus Status { get; set; }

  /// <summary>
  /// 
  /// <seealso cref="global::.TProtocolVersion"/>
  /// </summary>
  public TProtocolVersion ServerProtocolVersion { get; set; }

  public TSessionHandle SessionHandle
  {
    get
    {
      return _sessionHandle;
    }
    set
    {
      __isset.sessionHandle = true;
      this._sessionHandle = value;
    }
  }

  public Dictionary<string, string> Configuration
  {
    get
    {
      return _configuration;
    }
    set
    {
      __isset.@configuration = true;
      this._configuration = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool sessionHandle;
    public bool @configuration;
  }

  public TOpenSessionResp()
  {
    this.ServerProtocolVersion = TProtocolVersion.HIVE_CLI_SERVICE_PROTOCOL_V10;
  }

  public TOpenSessionResp(TStatus @status, TProtocolVersion serverProtocolVersion) : this()
  {
    this.Status = @status;
    this.ServerProtocolVersion = serverProtocolVersion;
  }

  public TOpenSessionResp DeepCopy()
  {
    var tmp256 = new TOpenSessionResp()
    if((Status != null))
    {
      tmp256.Status = (TStatus)this.Status.DeepCopy();
    }
    tmp256.ServerProtocolVersion = this.ServerProtocolVersion;
    if((SessionHandle != null) && __isset.sessionHandle)
    {
      tmp256.SessionHandle = (TSessionHandle)this.SessionHandle.DeepCopy();
    }
    tmp256.__isset.sessionHandle = this.__isset.sessionHandle;
    if((Configuration != null) && __isset.@configuration)
    {
      tmp256.Configuration = this.Configuration.DeepCopy();
    }
    tmp256.__isset.@configuration = this.__isset.@configuration;
    return tmp256;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_status = false;
      bool isset_serverProtocolVersion = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct)
            {
              Status = new TStatus();
              await Status.ReadAsync(iprot, cancellationToken);
              isset_status = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I32)
            {
              ServerProtocolVersion = (TProtocolVersion)await iprot.ReadI32Async(cancellationToken);
              isset_serverProtocolVersion = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.Struct)
            {
              SessionHandle = new TSessionHandle();
              await SessionHandle.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.Map)
            {
              {
                var _map257 = await iprot.ReadMapBeginAsync(cancellationToken);
                Configuration = new Dictionary<string, string>(_map257.Count);
                for(int _i258 = 0; _i258 < _map257.Count; ++_i258)
                {
                  string _key259;
                  string _val260;
                  _key259 = await iprot.ReadStringAsync(cancellationToken);
                  _val260 = await iprot.ReadStringAsync(cancellationToken);
                  Configuration[_key259] = _val260;
                }
                await iprot.ReadMapEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_status)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_serverProtocolVersion)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp261 = new TStruct("TOpenSessionResp");
      await oprot.WriteStructBeginAsync(tmp261, cancellationToken);
      var tmp262 = new TField();
      if((Status != null))
      {
        tmp262.Name = "status";
        tmp262.Type = TType.Struct;
        tmp262.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp262, cancellationToken);
        await Status.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      tmp262.Name = "serverProtocolVersion";
      tmp262.Type = TType.I32;
      tmp262.ID = 2;
      await oprot.WriteFieldBeginAsync(tmp262, cancellationToken);
      await oprot.WriteI32Async((int)ServerProtocolVersion, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      if((SessionHandle != null) && __isset.sessionHandle)
      {
        tmp262.Name = "sessionHandle";
        tmp262.Type = TType.Struct;
        tmp262.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp262, cancellationToken);
        await SessionHandle.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Configuration != null) && __isset.@configuration)
      {
        tmp262.Name = "configuration";
        tmp262.Type = TType.Map;
        tmp262.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp262, cancellationToken);
        await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Configuration.Count), cancellationToken);
        foreach (string _iter263 in Configuration.Keys)
        {
          await oprot.WriteStringAsync(_iter263, cancellationToken);
          await oprot.WriteStringAsync(Configuration[_iter263], cancellationToken);
        }
        await oprot.WriteMapEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TOpenSessionResp other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return global::System.Object.Equals(Status, other.Status)
      && global::System.Object.Equals(ServerProtocolVersion, other.ServerProtocolVersion)
      && ((__isset.sessionHandle == other.__isset.sessionHandle) && ((!__isset.sessionHandle) || (global::System.Object.Equals(SessionHandle, other.SessionHandle))))
      && ((__isset.@configuration == other.__isset.@configuration) && ((!__isset.@configuration) || (TCollections.Equals(Configuration, other.Configuration))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((Status != null))
      {
        hashcode = (hashcode * 397) + Status.GetHashCode();
      }
      hashcode = (hashcode * 397) + ServerProtocolVersion.GetHashCode();
      if((SessionHandle != null) && __isset.sessionHandle)
      {
        hashcode = (hashcode * 397) + SessionHandle.GetHashCode();
      }
      if((Configuration != null) && __isset.@configuration)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Configuration);
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp264 = new StringBuilder("TOpenSessionResp(");
    if((Status != null))
    {
      tmp264.Append(", Status: ");
      Status.ToString(tmp264);
    }
    tmp264.Append(", ServerProtocolVersion: ");
    ServerProtocolVersion.ToString(tmp264);
    if((SessionHandle != null) && __isset.sessionHandle)
    {
      tmp264.Append(", SessionHandle: ");
      SessionHandle.ToString(tmp264);
    }
    if((Configuration != null) && __isset.@configuration)
    {
      tmp264.Append(", Configuration: ");
      Configuration.ToString(tmp264);
    }
    tmp264.Append(')');
    return tmp264.ToString();
  }
}

