/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class TDownloadDataReq : TBase
{
  private string _tableName;
  private string _query;
  private string _format;
  private Dictionary<string, string> _downloadOptions;

  public TSessionHandle SessionHandle { get; set; }

  public string TableName
  {
    get
    {
      return _tableName;
    }
    set
    {
      __isset.tableName = true;
      this._tableName = value;
    }
  }

  public string Query
  {
    get
    {
      return _query;
    }
    set
    {
      __isset.@query = true;
      this._query = value;
    }
  }

  public string Format
  {
    get
    {
      return _format;
    }
    set
    {
      __isset.@format = true;
      this._format = value;
    }
  }

  public Dictionary<string, string> DownloadOptions
  {
    get
    {
      return _downloadOptions;
    }
    set
    {
      __isset.downloadOptions = true;
      this._downloadOptions = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool tableName;
    public bool @query;
    public bool @format;
    public bool downloadOptions;
  }

  public TDownloadDataReq()
  {
  }

  public TDownloadDataReq(TSessionHandle sessionHandle) : this()
  {
    this.SessionHandle = sessionHandle;
  }

  public TDownloadDataReq DeepCopy()
  {
    var tmp341 = new TDownloadDataReq()
    if((SessionHandle != null))
    {
      tmp341.SessionHandle = (TSessionHandle)this.SessionHandle.DeepCopy();
    }
    if((TableName != null) && __isset.tableName)
    {
      tmp341.TableName = this.TableName;
    }
    tmp341.__isset.tableName = this.__isset.tableName;
    if((Query != null) && __isset.@query)
    {
      tmp341.Query = this.Query;
    }
    tmp341.__isset.@query = this.__isset.@query;
    if((Format != null) && __isset.@format)
    {
      tmp341.Format = this.Format;
    }
    tmp341.__isset.@format = this.__isset.@format;
    if((DownloadOptions != null) && __isset.downloadOptions)
    {
      tmp341.DownloadOptions = this.DownloadOptions.DeepCopy();
    }
    tmp341.__isset.downloadOptions = this.__isset.downloadOptions;
    return tmp341;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_sessionHandle = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct)
            {
              SessionHandle = new TSessionHandle();
              await SessionHandle.ReadAsync(iprot, cancellationToken);
              isset_sessionHandle = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              TableName = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              Query = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              Format = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.Map)
            {
              {
                var _map342 = await iprot.ReadMapBeginAsync(cancellationToken);
                DownloadOptions = new Dictionary<string, string>(_map342.Count);
                for(int _i343 = 0; _i343 < _map342.Count; ++_i343)
                {
                  string _key344;
                  string _val345;
                  _key344 = await iprot.ReadStringAsync(cancellationToken);
                  _val345 = await iprot.ReadStringAsync(cancellationToken);
                  DownloadOptions[_key344] = _val345;
                }
                await iprot.ReadMapEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_sessionHandle)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp346 = new TStruct("TDownloadDataReq");
      await oprot.WriteStructBeginAsync(tmp346, cancellationToken);
      var tmp347 = new TField();
      if((SessionHandle != null))
      {
        tmp347.Name = "sessionHandle";
        tmp347.Type = TType.Struct;
        tmp347.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp347, cancellationToken);
        await SessionHandle.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((TableName != null) && __isset.tableName)
      {
        tmp347.Name = "tableName";
        tmp347.Type = TType.String;
        tmp347.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp347, cancellationToken);
        await oprot.WriteStringAsync(TableName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Query != null) && __isset.@query)
      {
        tmp347.Name = "query";
        tmp347.Type = TType.String;
        tmp347.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp347, cancellationToken);
        await oprot.WriteStringAsync(Query, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Format != null) && __isset.@format)
      {
        tmp347.Name = "format";
        tmp347.Type = TType.String;
        tmp347.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp347, cancellationToken);
        await oprot.WriteStringAsync(Format, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((DownloadOptions != null) && __isset.downloadOptions)
      {
        tmp347.Name = "downloadOptions";
        tmp347.Type = TType.Map;
        tmp347.ID = 5;
        await oprot.WriteFieldBeginAsync(tmp347, cancellationToken);
        await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, DownloadOptions.Count), cancellationToken);
        foreach (string _iter348 in DownloadOptions.Keys)
        {
          await oprot.WriteStringAsync(_iter348, cancellationToken);
          await oprot.WriteStringAsync(DownloadOptions[_iter348], cancellationToken);
        }
        await oprot.WriteMapEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TDownloadDataReq other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return global::System.Object.Equals(SessionHandle, other.SessionHandle)
      && ((__isset.tableName == other.__isset.tableName) && ((!__isset.tableName) || (global::System.Object.Equals(TableName, other.TableName))))
      && ((__isset.@query == other.__isset.@query) && ((!__isset.@query) || (global::System.Object.Equals(Query, other.Query))))
      && ((__isset.@format == other.__isset.@format) && ((!__isset.@format) || (global::System.Object.Equals(Format, other.Format))))
      && ((__isset.downloadOptions == other.__isset.downloadOptions) && ((!__isset.downloadOptions) || (TCollections.Equals(DownloadOptions, other.DownloadOptions))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((SessionHandle != null))
      {
        hashcode = (hashcode * 397) + SessionHandle.GetHashCode();
      }
      if((TableName != null) && __isset.tableName)
      {
        hashcode = (hashcode * 397) + TableName.GetHashCode();
      }
      if((Query != null) && __isset.@query)
      {
        hashcode = (hashcode * 397) + Query.GetHashCode();
      }
      if((Format != null) && __isset.@format)
      {
        hashcode = (hashcode * 397) + Format.GetHashCode();
      }
      if((DownloadOptions != null) && __isset.downloadOptions)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(DownloadOptions);
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp349 = new StringBuilder("TDownloadDataReq(");
    if((SessionHandle != null))
    {
      tmp349.Append(", SessionHandle: ");
      SessionHandle.ToString(tmp349);
    }
    if((TableName != null) && __isset.tableName)
    {
      tmp349.Append(", TableName: ");
      TableName.ToString(tmp349);
    }
    if((Query != null) && __isset.@query)
    {
      tmp349.Append(", Query: ");
      Query.ToString(tmp349);
    }
    if((Format != null) && __isset.@format)
    {
      tmp349.Append(", Format: ");
      Format.ToString(tmp349);
    }
    if((DownloadOptions != null) && __isset.downloadOptions)
    {
      tmp349.Append(", DownloadOptions: ");
      DownloadOptions.ToString(tmp349);
    }
    tmp349.Append(')');
    return tmp349.ToString();
  }
}

