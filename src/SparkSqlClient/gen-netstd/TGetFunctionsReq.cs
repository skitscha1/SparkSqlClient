/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class TGetFunctionsReq : TBase
{
  private string _catalogName;
  private string _schemaName;

  public TSessionHandle SessionHandle { get; set; }

  public string CatalogName
  {
    get
    {
      return _catalogName;
    }
    set
    {
      __isset.catalogName = true;
      this._catalogName = value;
    }
  }

  public string SchemaName
  {
    get
    {
      return _schemaName;
    }
    set
    {
      __isset.schemaName = true;
      this._schemaName = value;
    }
  }

  public string FunctionName { get; set; }


  public Isset __isset;
  public struct Isset
  {
    public bool catalogName;
    public bool schemaName;
  }

  public TGetFunctionsReq()
  {
  }

  public TGetFunctionsReq(TSessionHandle sessionHandle, string functionName) : this()
  {
    this.SessionHandle = sessionHandle;
    this.FunctionName = functionName;
  }

  public TGetFunctionsReq DeepCopy()
  {
    var tmp410 = new TGetFunctionsReq()
    if((SessionHandle != null))
    {
      tmp410.SessionHandle = (TSessionHandle)this.SessionHandle.DeepCopy();
    }
    if((CatalogName != null) && __isset.catalogName)
    {
      tmp410.CatalogName = this.CatalogName;
    }
    tmp410.__isset.catalogName = this.__isset.catalogName;
    if((SchemaName != null) && __isset.schemaName)
    {
      tmp410.SchemaName = this.SchemaName;
    }
    tmp410.__isset.schemaName = this.__isset.schemaName;
    if((FunctionName != null))
    {
      tmp410.FunctionName = this.FunctionName;
    }
    return tmp410;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_sessionHandle = false;
      bool isset_functionName = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct)
            {
              SessionHandle = new TSessionHandle();
              await SessionHandle.ReadAsync(iprot, cancellationToken);
              isset_sessionHandle = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              CatalogName = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              SchemaName = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              FunctionName = await iprot.ReadStringAsync(cancellationToken);
              isset_functionName = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_sessionHandle)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_functionName)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp411 = new TStruct("TGetFunctionsReq");
      await oprot.WriteStructBeginAsync(tmp411, cancellationToken);
      var tmp412 = new TField();
      if((SessionHandle != null))
      {
        tmp412.Name = "sessionHandle";
        tmp412.Type = TType.Struct;
        tmp412.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp412, cancellationToken);
        await SessionHandle.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((CatalogName != null) && __isset.catalogName)
      {
        tmp412.Name = "catalogName";
        tmp412.Type = TType.String;
        tmp412.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp412, cancellationToken);
        await oprot.WriteStringAsync(CatalogName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((SchemaName != null) && __isset.schemaName)
      {
        tmp412.Name = "schemaName";
        tmp412.Type = TType.String;
        tmp412.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp412, cancellationToken);
        await oprot.WriteStringAsync(SchemaName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((FunctionName != null))
      {
        tmp412.Name = "functionName";
        tmp412.Type = TType.String;
        tmp412.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp412, cancellationToken);
        await oprot.WriteStringAsync(FunctionName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TGetFunctionsReq other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return global::System.Object.Equals(SessionHandle, other.SessionHandle)
      && ((__isset.catalogName == other.__isset.catalogName) && ((!__isset.catalogName) || (global::System.Object.Equals(CatalogName, other.CatalogName))))
      && ((__isset.schemaName == other.__isset.schemaName) && ((!__isset.schemaName) || (global::System.Object.Equals(SchemaName, other.SchemaName))))
      && global::System.Object.Equals(FunctionName, other.FunctionName);
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((SessionHandle != null))
      {
        hashcode = (hashcode * 397) + SessionHandle.GetHashCode();
      }
      if((CatalogName != null) && __isset.catalogName)
      {
        hashcode = (hashcode * 397) + CatalogName.GetHashCode();
      }
      if((SchemaName != null) && __isset.schemaName)
      {
        hashcode = (hashcode * 397) + SchemaName.GetHashCode();
      }
      if((FunctionName != null))
      {
        hashcode = (hashcode * 397) + FunctionName.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp413 = new StringBuilder("TGetFunctionsReq(");
    if((SessionHandle != null))
    {
      tmp413.Append(", SessionHandle: ");
      SessionHandle.ToString(tmp413);
    }
    if((CatalogName != null) && __isset.catalogName)
    {
      tmp413.Append(", CatalogName: ");
      CatalogName.ToString(tmp413);
    }
    if((SchemaName != null) && __isset.schemaName)
    {
      tmp413.Append(", SchemaName: ");
      SchemaName.ToString(tmp413);
    }
    if((FunctionName != null))
    {
      tmp413.Append(", FunctionName: ");
      FunctionName.ToString(tmp413);
    }
    tmp413.Append(')');
    return tmp413.ToString();
  }
}

