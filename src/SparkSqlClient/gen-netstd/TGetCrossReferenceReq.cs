/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class TGetCrossReferenceReq : TBase
{
  private string _parentCatalogName;
  private string _parentSchemaName;
  private string _parentTableName;
  private string _foreignCatalogName;
  private string _foreignSchemaName;
  private string _foreignTableName;

  public TSessionHandle SessionHandle { get; set; }

  public string ParentCatalogName
  {
    get
    {
      return _parentCatalogName;
    }
    set
    {
      __isset.parentCatalogName = true;
      this._parentCatalogName = value;
    }
  }

  public string ParentSchemaName
  {
    get
    {
      return _parentSchemaName;
    }
    set
    {
      __isset.parentSchemaName = true;
      this._parentSchemaName = value;
    }
  }

  public string ParentTableName
  {
    get
    {
      return _parentTableName;
    }
    set
    {
      __isset.parentTableName = true;
      this._parentTableName = value;
    }
  }

  public string ForeignCatalogName
  {
    get
    {
      return _foreignCatalogName;
    }
    set
    {
      __isset.foreignCatalogName = true;
      this._foreignCatalogName = value;
    }
  }

  public string ForeignSchemaName
  {
    get
    {
      return _foreignSchemaName;
    }
    set
    {
      __isset.foreignSchemaName = true;
      this._foreignSchemaName = value;
    }
  }

  public string ForeignTableName
  {
    get
    {
      return _foreignTableName;
    }
    set
    {
      __isset.foreignTableName = true;
      this._foreignTableName = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool parentCatalogName;
    public bool parentSchemaName;
    public bool parentTableName;
    public bool foreignCatalogName;
    public bool foreignSchemaName;
    public bool foreignTableName;
  }

  public TGetCrossReferenceReq()
  {
  }

  public TGetCrossReferenceReq(TSessionHandle sessionHandle) : this()
  {
    this.SessionHandle = sessionHandle;
  }

  public TGetCrossReferenceReq DeepCopy()
  {
    var tmp430 = new TGetCrossReferenceReq()
    if((SessionHandle != null))
    {
      tmp430.SessionHandle = (TSessionHandle)this.SessionHandle.DeepCopy();
    }
    if((ParentCatalogName != null) && __isset.parentCatalogName)
    {
      tmp430.ParentCatalogName = this.ParentCatalogName;
    }
    tmp430.__isset.parentCatalogName = this.__isset.parentCatalogName;
    if((ParentSchemaName != null) && __isset.parentSchemaName)
    {
      tmp430.ParentSchemaName = this.ParentSchemaName;
    }
    tmp430.__isset.parentSchemaName = this.__isset.parentSchemaName;
    if((ParentTableName != null) && __isset.parentTableName)
    {
      tmp430.ParentTableName = this.ParentTableName;
    }
    tmp430.__isset.parentTableName = this.__isset.parentTableName;
    if((ForeignCatalogName != null) && __isset.foreignCatalogName)
    {
      tmp430.ForeignCatalogName = this.ForeignCatalogName;
    }
    tmp430.__isset.foreignCatalogName = this.__isset.foreignCatalogName;
    if((ForeignSchemaName != null) && __isset.foreignSchemaName)
    {
      tmp430.ForeignSchemaName = this.ForeignSchemaName;
    }
    tmp430.__isset.foreignSchemaName = this.__isset.foreignSchemaName;
    if((ForeignTableName != null) && __isset.foreignTableName)
    {
      tmp430.ForeignTableName = this.ForeignTableName;
    }
    tmp430.__isset.foreignTableName = this.__isset.foreignTableName;
    return tmp430;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_sessionHandle = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct)
            {
              SessionHandle = new TSessionHandle();
              await SessionHandle.ReadAsync(iprot, cancellationToken);
              isset_sessionHandle = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              ParentCatalogName = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              ParentSchemaName = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              ParentTableName = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.String)
            {
              ForeignCatalogName = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.String)
            {
              ForeignSchemaName = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.String)
            {
              ForeignTableName = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_sessionHandle)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp431 = new TStruct("TGetCrossReferenceReq");
      await oprot.WriteStructBeginAsync(tmp431, cancellationToken);
      var tmp432 = new TField();
      if((SessionHandle != null))
      {
        tmp432.Name = "sessionHandle";
        tmp432.Type = TType.Struct;
        tmp432.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp432, cancellationToken);
        await SessionHandle.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ParentCatalogName != null) && __isset.parentCatalogName)
      {
        tmp432.Name = "parentCatalogName";
        tmp432.Type = TType.String;
        tmp432.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp432, cancellationToken);
        await oprot.WriteStringAsync(ParentCatalogName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ParentSchemaName != null) && __isset.parentSchemaName)
      {
        tmp432.Name = "parentSchemaName";
        tmp432.Type = TType.String;
        tmp432.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp432, cancellationToken);
        await oprot.WriteStringAsync(ParentSchemaName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ParentTableName != null) && __isset.parentTableName)
      {
        tmp432.Name = "parentTableName";
        tmp432.Type = TType.String;
        tmp432.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp432, cancellationToken);
        await oprot.WriteStringAsync(ParentTableName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ForeignCatalogName != null) && __isset.foreignCatalogName)
      {
        tmp432.Name = "foreignCatalogName";
        tmp432.Type = TType.String;
        tmp432.ID = 5;
        await oprot.WriteFieldBeginAsync(tmp432, cancellationToken);
        await oprot.WriteStringAsync(ForeignCatalogName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ForeignSchemaName != null) && __isset.foreignSchemaName)
      {
        tmp432.Name = "foreignSchemaName";
        tmp432.Type = TType.String;
        tmp432.ID = 6;
        await oprot.WriteFieldBeginAsync(tmp432, cancellationToken);
        await oprot.WriteStringAsync(ForeignSchemaName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ForeignTableName != null) && __isset.foreignTableName)
      {
        tmp432.Name = "foreignTableName";
        tmp432.Type = TType.String;
        tmp432.ID = 7;
        await oprot.WriteFieldBeginAsync(tmp432, cancellationToken);
        await oprot.WriteStringAsync(ForeignTableName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TGetCrossReferenceReq other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return global::System.Object.Equals(SessionHandle, other.SessionHandle)
      && ((__isset.parentCatalogName == other.__isset.parentCatalogName) && ((!__isset.parentCatalogName) || (global::System.Object.Equals(ParentCatalogName, other.ParentCatalogName))))
      && ((__isset.parentSchemaName == other.__isset.parentSchemaName) && ((!__isset.parentSchemaName) || (global::System.Object.Equals(ParentSchemaName, other.ParentSchemaName))))
      && ((__isset.parentTableName == other.__isset.parentTableName) && ((!__isset.parentTableName) || (global::System.Object.Equals(ParentTableName, other.ParentTableName))))
      && ((__isset.foreignCatalogName == other.__isset.foreignCatalogName) && ((!__isset.foreignCatalogName) || (global::System.Object.Equals(ForeignCatalogName, other.ForeignCatalogName))))
      && ((__isset.foreignSchemaName == other.__isset.foreignSchemaName) && ((!__isset.foreignSchemaName) || (global::System.Object.Equals(ForeignSchemaName, other.ForeignSchemaName))))
      && ((__isset.foreignTableName == other.__isset.foreignTableName) && ((!__isset.foreignTableName) || (global::System.Object.Equals(ForeignTableName, other.ForeignTableName))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((SessionHandle != null))
      {
        hashcode = (hashcode * 397) + SessionHandle.GetHashCode();
      }
      if((ParentCatalogName != null) && __isset.parentCatalogName)
      {
        hashcode = (hashcode * 397) + ParentCatalogName.GetHashCode();
      }
      if((ParentSchemaName != null) && __isset.parentSchemaName)
      {
        hashcode = (hashcode * 397) + ParentSchemaName.GetHashCode();
      }
      if((ParentTableName != null) && __isset.parentTableName)
      {
        hashcode = (hashcode * 397) + ParentTableName.GetHashCode();
      }
      if((ForeignCatalogName != null) && __isset.foreignCatalogName)
      {
        hashcode = (hashcode * 397) + ForeignCatalogName.GetHashCode();
      }
      if((ForeignSchemaName != null) && __isset.foreignSchemaName)
      {
        hashcode = (hashcode * 397) + ForeignSchemaName.GetHashCode();
      }
      if((ForeignTableName != null) && __isset.foreignTableName)
      {
        hashcode = (hashcode * 397) + ForeignTableName.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp433 = new StringBuilder("TGetCrossReferenceReq(");
    if((SessionHandle != null))
    {
      tmp433.Append(", SessionHandle: ");
      SessionHandle.ToString(tmp433);
    }
    if((ParentCatalogName != null) && __isset.parentCatalogName)
    {
      tmp433.Append(", ParentCatalogName: ");
      ParentCatalogName.ToString(tmp433);
    }
    if((ParentSchemaName != null) && __isset.parentSchemaName)
    {
      tmp433.Append(", ParentSchemaName: ");
      ParentSchemaName.ToString(tmp433);
    }
    if((ParentTableName != null) && __isset.parentTableName)
    {
      tmp433.Append(", ParentTableName: ");
      ParentTableName.ToString(tmp433);
    }
    if((ForeignCatalogName != null) && __isset.foreignCatalogName)
    {
      tmp433.Append(", ForeignCatalogName: ");
      ForeignCatalogName.ToString(tmp433);
    }
    if((ForeignSchemaName != null) && __isset.foreignSchemaName)
    {
      tmp433.Append(", ForeignSchemaName: ");
      ForeignSchemaName.ToString(tmp433);
    }
    if((ForeignTableName != null) && __isset.foreignTableName)
    {
      tmp433.Append(", ForeignTableName: ");
      ForeignTableName.ToString(tmp433);
    }
    tmp433.Append(')');
    return tmp433.ToString();
  }
}

