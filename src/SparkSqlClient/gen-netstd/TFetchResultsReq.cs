/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class TFetchResultsReq : TBase
{
  private short _fetchType;

  public TOperationHandle OperationHandle { get; set; }

  /// <summary>
  /// 
  /// <seealso cref="global::.TFetchOrientation"/>
  /// </summary>
  public TFetchOrientation Orientation { get; set; }

  public long MaxRows { get; set; }

  public short FetchType
  {
    get
    {
      return _fetchType;
    }
    set
    {
      __isset.fetchType = true;
      this._fetchType = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool fetchType;
  }

  public TFetchResultsReq()
  {
    this.Orientation = TFetchOrientation.FETCH_NEXT;
    this._fetchType = 0;
    this.__isset.fetchType = true;
  }

  public TFetchResultsReq(TOperationHandle operationHandle, TFetchOrientation @orientation, long maxRows) : this()
  {
    this.OperationHandle = operationHandle;
    this.Orientation = @orientation;
    this.MaxRows = maxRows;
  }

  public TFetchResultsReq DeepCopy()
  {
    var tmp480 = new TFetchResultsReq()
    if((OperationHandle != null))
    {
      tmp480.OperationHandle = (TOperationHandle)this.OperationHandle.DeepCopy();
    }
    tmp480.Orientation = this.Orientation;
    tmp480.MaxRows = this.MaxRows;
    if(__isset.fetchType)
    {
      tmp480.FetchType = this.FetchType;
    }
    tmp480.__isset.fetchType = this.__isset.fetchType;
    return tmp480;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_operationHandle = false;
      bool isset_orientation = false;
      bool isset_maxRows = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct)
            {
              OperationHandle = new TOperationHandle();
              await OperationHandle.ReadAsync(iprot, cancellationToken);
              isset_operationHandle = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I32)
            {
              Orientation = (TFetchOrientation)await iprot.ReadI32Async(cancellationToken);
              isset_orientation = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.I64)
            {
              MaxRows = await iprot.ReadI64Async(cancellationToken);
              isset_maxRows = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.I16)
            {
              FetchType = await iprot.ReadI16Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_operationHandle)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_orientation)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_maxRows)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp481 = new TStruct("TFetchResultsReq");
      await oprot.WriteStructBeginAsync(tmp481, cancellationToken);
      var tmp482 = new TField();
      if((OperationHandle != null))
      {
        tmp482.Name = "operationHandle";
        tmp482.Type = TType.Struct;
        tmp482.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp482, cancellationToken);
        await OperationHandle.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      tmp482.Name = "orientation";
      tmp482.Type = TType.I32;
      tmp482.ID = 2;
      await oprot.WriteFieldBeginAsync(tmp482, cancellationToken);
      await oprot.WriteI32Async((int)Orientation, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      tmp482.Name = "maxRows";
      tmp482.Type = TType.I64;
      tmp482.ID = 3;
      await oprot.WriteFieldBeginAsync(tmp482, cancellationToken);
      await oprot.WriteI64Async(MaxRows, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      if(__isset.fetchType)
      {
        tmp482.Name = "fetchType";
        tmp482.Type = TType.I16;
        tmp482.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp482, cancellationToken);
        await oprot.WriteI16Async(FetchType, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TFetchResultsReq other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return global::System.Object.Equals(OperationHandle, other.OperationHandle)
      && global::System.Object.Equals(Orientation, other.Orientation)
      && global::System.Object.Equals(MaxRows, other.MaxRows)
      && ((__isset.fetchType == other.__isset.fetchType) && ((!__isset.fetchType) || (global::System.Object.Equals(FetchType, other.FetchType))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((OperationHandle != null))
      {
        hashcode = (hashcode * 397) + OperationHandle.GetHashCode();
      }
      hashcode = (hashcode * 397) + Orientation.GetHashCode();
      hashcode = (hashcode * 397) + MaxRows.GetHashCode();
      if(__isset.fetchType)
      {
        hashcode = (hashcode * 397) + FetchType.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp483 = new StringBuilder("TFetchResultsReq(");
    if((OperationHandle != null))
    {
      tmp483.Append(", OperationHandle: ");
      OperationHandle.ToString(tmp483);
    }
    tmp483.Append(", Orientation: ");
    Orientation.ToString(tmp483);
    tmp483.Append(", MaxRows: ");
    MaxRows.ToString(tmp483);
    if(__isset.fetchType)
    {
      tmp483.Append(", FetchType: ");
      FetchType.ToString(tmp483);
    }
    tmp483.Append(')');
    return tmp483.ToString();
  }
}

