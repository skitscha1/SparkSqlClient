/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class TExecuteStatementReq : TBase
{
  private Dictionary<string, string> _confOverlay;
  private bool _runAsync;
  private long _queryTimeout;

  public TSessionHandle SessionHandle { get; set; }

  public string Statement { get; set; }

  public Dictionary<string, string> ConfOverlay
  {
    get
    {
      return _confOverlay;
    }
    set
    {
      __isset.confOverlay = true;
      this._confOverlay = value;
    }
  }

  public bool RunAsync
  {
    get
    {
      return _runAsync;
    }
    set
    {
      __isset.runAsync = true;
      this._runAsync = value;
    }
  }

  public long QueryTimeout
  {
    get
    {
      return _queryTimeout;
    }
    set
    {
      __isset.queryTimeout = true;
      this._queryTimeout = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool confOverlay;
    public bool runAsync;
    public bool queryTimeout;
  }

  public TExecuteStatementReq()
  {
    this._runAsync = false;
    this.__isset.runAsync = true;
    this._queryTimeout = 0;
    this.__isset.queryTimeout = true;
  }

  public TExecuteStatementReq(TSessionHandle sessionHandle, string @statement) : this()
  {
    this.SessionHandle = sessionHandle;
    this.Statement = @statement;
  }

  public TExecuteStatementReq DeepCopy()
  {
    var tmp306 = new TExecuteStatementReq()
    if((SessionHandle != null))
    {
      tmp306.SessionHandle = (TSessionHandle)this.SessionHandle.DeepCopy();
    }
    if((Statement != null))
    {
      tmp306.Statement = this.Statement;
    }
    if((ConfOverlay != null) && __isset.confOverlay)
    {
      tmp306.ConfOverlay = this.ConfOverlay.DeepCopy();
    }
    tmp306.__isset.confOverlay = this.__isset.confOverlay;
    if(__isset.runAsync)
    {
      tmp306.RunAsync = this.RunAsync;
    }
    tmp306.__isset.runAsync = this.__isset.runAsync;
    if(__isset.queryTimeout)
    {
      tmp306.QueryTimeout = this.QueryTimeout;
    }
    tmp306.__isset.queryTimeout = this.__isset.queryTimeout;
    return tmp306;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_sessionHandle = false;
      bool isset_statement = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct)
            {
              SessionHandle = new TSessionHandle();
              await SessionHandle.ReadAsync(iprot, cancellationToken);
              isset_sessionHandle = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              Statement = await iprot.ReadStringAsync(cancellationToken);
              isset_statement = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.Map)
            {
              {
                var _map307 = await iprot.ReadMapBeginAsync(cancellationToken);
                ConfOverlay = new Dictionary<string, string>(_map307.Count);
                for(int _i308 = 0; _i308 < _map307.Count; ++_i308)
                {
                  string _key309;
                  string _val310;
                  _key309 = await iprot.ReadStringAsync(cancellationToken);
                  _val310 = await iprot.ReadStringAsync(cancellationToken);
                  ConfOverlay[_key309] = _val310;
                }
                await iprot.ReadMapEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.Bool)
            {
              RunAsync = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.I64)
            {
              QueryTimeout = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_sessionHandle)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_statement)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp311 = new TStruct("TExecuteStatementReq");
      await oprot.WriteStructBeginAsync(tmp311, cancellationToken);
      var tmp312 = new TField();
      if((SessionHandle != null))
      {
        tmp312.Name = "sessionHandle";
        tmp312.Type = TType.Struct;
        tmp312.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp312, cancellationToken);
        await SessionHandle.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Statement != null))
      {
        tmp312.Name = "statement";
        tmp312.Type = TType.String;
        tmp312.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp312, cancellationToken);
        await oprot.WriteStringAsync(Statement, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ConfOverlay != null) && __isset.confOverlay)
      {
        tmp312.Name = "confOverlay";
        tmp312.Type = TType.Map;
        tmp312.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp312, cancellationToken);
        await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, ConfOverlay.Count), cancellationToken);
        foreach (string _iter313 in ConfOverlay.Keys)
        {
          await oprot.WriteStringAsync(_iter313, cancellationToken);
          await oprot.WriteStringAsync(ConfOverlay[_iter313], cancellationToken);
        }
        await oprot.WriteMapEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.runAsync)
      {
        tmp312.Name = "runAsync";
        tmp312.Type = TType.Bool;
        tmp312.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp312, cancellationToken);
        await oprot.WriteBoolAsync(RunAsync, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.queryTimeout)
      {
        tmp312.Name = "queryTimeout";
        tmp312.Type = TType.I64;
        tmp312.ID = 5;
        await oprot.WriteFieldBeginAsync(tmp312, cancellationToken);
        await oprot.WriteI64Async(QueryTimeout, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TExecuteStatementReq other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return global::System.Object.Equals(SessionHandle, other.SessionHandle)
      && global::System.Object.Equals(Statement, other.Statement)
      && ((__isset.confOverlay == other.__isset.confOverlay) && ((!__isset.confOverlay) || (TCollections.Equals(ConfOverlay, other.ConfOverlay))))
      && ((__isset.runAsync == other.__isset.runAsync) && ((!__isset.runAsync) || (global::System.Object.Equals(RunAsync, other.RunAsync))))
      && ((__isset.queryTimeout == other.__isset.queryTimeout) && ((!__isset.queryTimeout) || (global::System.Object.Equals(QueryTimeout, other.QueryTimeout))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((SessionHandle != null))
      {
        hashcode = (hashcode * 397) + SessionHandle.GetHashCode();
      }
      if((Statement != null))
      {
        hashcode = (hashcode * 397) + Statement.GetHashCode();
      }
      if((ConfOverlay != null) && __isset.confOverlay)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(ConfOverlay);
      }
      if(__isset.runAsync)
      {
        hashcode = (hashcode * 397) + RunAsync.GetHashCode();
      }
      if(__isset.queryTimeout)
      {
        hashcode = (hashcode * 397) + QueryTimeout.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp314 = new StringBuilder("TExecuteStatementReq(");
    if((SessionHandle != null))
    {
      tmp314.Append(", SessionHandle: ");
      SessionHandle.ToString(tmp314);
    }
    if((Statement != null))
    {
      tmp314.Append(", Statement: ");
      Statement.ToString(tmp314);
    }
    if((ConfOverlay != null) && __isset.confOverlay)
    {
      tmp314.Append(", ConfOverlay: ");
      ConfOverlay.ToString(tmp314);
    }
    if(__isset.runAsync)
    {
      tmp314.Append(", RunAsync: ");
      RunAsync.ToString(tmp314);
    }
    if(__isset.queryTimeout)
    {
      tmp314.Append(", QueryTimeout: ");
      QueryTimeout.ToString(tmp314);
    }
    tmp314.Append(')');
    return tmp314.ToString();
  }
}

