/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class TSetClientInfoReq : TBase
{
  private Dictionary<string, string> _configuration;

  public TSessionHandle SessionHandle { get; set; }

  public Dictionary<string, string> Configuration
  {
    get
    {
      return _configuration;
    }
    set
    {
      __isset.@configuration = true;
      this._configuration = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool @configuration;
  }

  public TSetClientInfoReq()
  {
  }

  public TSetClientInfoReq(TSessionHandle sessionHandle) : this()
  {
    this.SessionHandle = sessionHandle;
  }

  public TSetClientInfoReq DeepCopy()
  {
    var tmp266 = new TSetClientInfoReq()
    if((SessionHandle != null))
    {
      tmp266.SessionHandle = (TSessionHandle)this.SessionHandle.DeepCopy();
    }
    if((Configuration != null) && __isset.@configuration)
    {
      tmp266.Configuration = this.Configuration.DeepCopy();
    }
    tmp266.__isset.@configuration = this.__isset.@configuration;
    return tmp266;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_sessionHandle = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct)
            {
              SessionHandle = new TSessionHandle();
              await SessionHandle.ReadAsync(iprot, cancellationToken);
              isset_sessionHandle = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.Map)
            {
              {
                var _map267 = await iprot.ReadMapBeginAsync(cancellationToken);
                Configuration = new Dictionary<string, string>(_map267.Count);
                for(int _i268 = 0; _i268 < _map267.Count; ++_i268)
                {
                  string _key269;
                  string _val270;
                  _key269 = await iprot.ReadStringAsync(cancellationToken);
                  _val270 = await iprot.ReadStringAsync(cancellationToken);
                  Configuration[_key269] = _val270;
                }
                await iprot.ReadMapEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_sessionHandle)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp271 = new TStruct("TSetClientInfoReq");
      await oprot.WriteStructBeginAsync(tmp271, cancellationToken);
      var tmp272 = new TField();
      if((SessionHandle != null))
      {
        tmp272.Name = "sessionHandle";
        tmp272.Type = TType.Struct;
        tmp272.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp272, cancellationToken);
        await SessionHandle.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Configuration != null) && __isset.@configuration)
      {
        tmp272.Name = "configuration";
        tmp272.Type = TType.Map;
        tmp272.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp272, cancellationToken);
        await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Configuration.Count), cancellationToken);
        foreach (string _iter273 in Configuration.Keys)
        {
          await oprot.WriteStringAsync(_iter273, cancellationToken);
          await oprot.WriteStringAsync(Configuration[_iter273], cancellationToken);
        }
        await oprot.WriteMapEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TSetClientInfoReq other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return global::System.Object.Equals(SessionHandle, other.SessionHandle)
      && ((__isset.@configuration == other.__isset.@configuration) && ((!__isset.@configuration) || (TCollections.Equals(Configuration, other.Configuration))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((SessionHandle != null))
      {
        hashcode = (hashcode * 397) + SessionHandle.GetHashCode();
      }
      if((Configuration != null) && __isset.@configuration)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Configuration);
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp274 = new StringBuilder("TSetClientInfoReq(");
    if((SessionHandle != null))
    {
      tmp274.Append(", SessionHandle: ");
      SessionHandle.ToString(tmp274);
    }
    if((Configuration != null) && __isset.@configuration)
    {
      tmp274.Append(", Configuration: ");
      Configuration.ToString(tmp274);
    }
    tmp274.Append(')');
    return tmp274.ToString();
  }
}

